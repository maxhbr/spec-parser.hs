@startuml
skinparam packageStyle rectangle
set separator none
' vocabulary
' classes
together {
abstract AnyLicenseInfo {
<b>Summary</b>
Abstract class representing a license combination consisting of one or
more licenses (optionally including additional text), which may be
combined according to the SPDX license expression syntax.
<b>Description</b>
An AnyLicenseInfo is used by a licensing field for a software package,
file or snippet when its value is not NOASSERTION or NONE. It can be a
single license (either on the SPDX License List or a custom-defined
license); a single license with an "or later" operator applied; the
foregoing with additional text applied; or a set of licenses combined by
applying "AND" and "OR" operators recursively.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : LicenseField
    name : AnyLicenseInfo
.. properties ..
}
class ConjunctiveLicenseSet {
<b>Summary</b>
Portion of an AnyLicenseInfo representing a set of licensing information
where all elements apply.
<b>Description</b>
A ConjunctiveLicenseSet indicates that *each* of its subsidiary
AnyLicenseInfos apply. In other words, a ConjunctiveLicenseSet of two or
more licenses represents a licensing situation where *all* of the
specified licenses are to be complied with. It is represented in the
SPDX License Expression Syntax by the `AND` operator.

It is syntactically correct to specify a ConjunctiveLicenseSet where the
subsidiary AnyLicenseInfos may be "incompatible" according to a
particular interpretation of the corresponding Licenses. The SPDX
License Expression Syntax does not take into account interpretation of
license texts, which is left to the consumer of SPDX data to determine
for themselves.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : ConjunctiveLicenseSet
.. properties ..
    <b>member </b>: AnyLicenseInfo [2..]
}
"AnyLicenseInfo" <-[dashed,thickness=4]-- "ConjunctiveLicenseSet::member"
class CustomLicense {
<b>Summary</b>
A license that is not listed on the SPDX License List.
<b>Description</b>
A CustomLicense represents a License that is not listed on the SPDX
License List at https://spdx.org/licenses, and is therefore defined by
an SPDX data creator.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : License
    name : CustomLicense
.. properties ..
}
class CustomLicenseAddition {
<b>Summary</b>
A license addition that is not listed on the SPDX Exceptions List.
<b>Description</b>
A CustomLicenseAddition represents an addition to a License that is not
listed on the SPDX Exceptions List at
https://spdx.org/licenses/exceptions-index.html, and is therefore
defined by an SPDX data creator.

It is intended to represent additional language which is meant to be
added to a License, but which is not itself a standalone License.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseAddition
    name : CustomLicenseAddition
.. properties ..
}
class DisjunctiveLicenseSet {
<b>Summary</b>
Portion of an AnyLicenseInfo representing a set of licensing information
where only any one of the elements applies.
<b>Description</b>
A DisjunctiveLicenseSet indicates that *only one* of its subsidiary
AnyLicenseInfos is required to apply. In other words, a
DisjunctiveLicenseSet of two or more licenses represents a licensing
situation where *only one* of the specified licenses are to be complied
with. A consumer of SPDX data would typically understand this to permit
the recipient of the licensed content to choose which of the
corresponding license they would prefer to use. It is represented in the
SPDX License Expression Syntax by the `OR` operator.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : DisjunctiveLicenseSet
.. properties ..
    <b>member </b>: AnyLicenseInfo [2..]
}
"AnyLicenseInfo" <-[dashed,thickness=4]-- "DisjunctiveLicenseSet::member"
abstract License {
<b>Summary</b>
Abstract class for the portion of an AnyLicenseInfo representing a
license.
<b>Description</b>
A License represents a license text, whether listed on the SPDX License
List (ListedLicense) or defined by an SPDX data creator (CustomLicense).
.. metadata ..
    Instantiability : Abstract
    SubclassOf : AnyLicenseInfo
    name : License
.. properties ..
    <b>isDeprecatedLicenseId </b>: xsd:boolean [0..1]
    <b>isFsfLibre </b>: xsd:boolean [0..1]
    <b>isOsiApproved </b>: xsd:boolean [0..1]
    <b>licenseComment </b>: xsd:string [0..1]
    <b>licenseId </b>: xsd:string [1..1]
    <b>licenseName </b>: xsd:string [1..1]
    <b>licenseText </b>: xsd:string [1..1]
    <b>obsoletedBy </b>: xsd:string [0..1]
    <b>seeAlso </b>: xsd:anyURI [0..]
    <b>standardLicenseHeader </b>: xsd:string [0..1]
    <b>standardLicenseTemplate </b>: xsd:string [0..1]
}
abstract LicenseAddition {
<b>Summary</b>
Abstract class for additional text intended to be added to a License,
but which is not itself a standalone License.
<b>Description</b>
A LicenseAddition represents text which is intended to be added to a
License as additional text, but which is not itself intended to be a
standalone License.

It may be an exception which is listed on the SPDX Exceptions List
(ListedLicenseException), or may be any other additional text (as an
exception or otherwise) which is defined by an SPDX data creator
(CustomLicenseAddition).
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : LicenseAddition
.. properties ..
    <b>additionComment </b>: xsd:string [0..1]
    <b>additionId </b>: xsd:string [1..1]
    <b>additionName </b>: xsd:string [1..1]
    <b>additionText </b>: xsd:string [1..1]
    <b>isDeprecatedAdditionId </b>: xsd:boolean [0..1]
    <b>obsoletedBy </b>: xsd:string [0..1]
    <b>seeAlso </b>: xsd:anyURI [0..]
    <b>standardAdditionTemplate </b>: xsd:string [0..1]
}
abstract LicenseField {
<b>Summary</b>
Base abstract class used for all fields that can take a value of either
a license expression, NOASSERTION, or NONE.
<b>Description</b>
A LicenseField is the primary value that is used by a licensing field
for a software Package, File or Snippet. It represents either a license
expression, or the values NOASSERTION or NONE. The specific meanings of
NOASSERTION or NONE for the particular licensing field are defined in
the corresponding property description.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : LicenseField
.. properties ..
}
class ListedLicense {
<b>Summary</b>
A license that is listed on the SPDX License List.
<b>Description</b>
A ListedLicense represents a License that is listed on the SPDX License
List at https://spdx.org/licenses.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : License
    name : ListedLicense
.. properties ..
    <b>deprecatedVersion </b>: xsd:string [0..1]
    <b>listVersionAdded </b>: xsd:string [0..1]
}
class ListedLicenseException {
<b>Summary</b>
A license exception that is listed on the SPDX Exceptions list.
<b>Description</b>
A ListedLicenseException represents an exception to a License (in other
words, an exception to a license condition or an additional permission
beyond those granted in a License) which is listed on the SPDX
Exceptions List at https://spdx.org/licenses/exceptions-index.html.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseAddition
    name : ListedLicenseException
.. properties ..
    <b>deprecatedVersion </b>: xsd:string [0..1]
    <b>listVersionAdded </b>: xsd:string [0..1]
}
class NoAssertionLicense {
<b>Summary</b>
Concrete class representing an absence of an assertion about license
information.
<b>Description</b>
A NoAssertionLicense is the primary value that is used by a
concludedLicense or declaredLicense field that indicates that the SPDX
data creator is making no assertion about the license information for
the corresponding software Package, File or Snippet.

The specific meaning of NoAssertionLicense in the context of a
concludedLicense or declaredLicense field is more fully set forth in the
Property definitions for those fields.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseField
    name : NoAssertionLicense
.. properties ..
}
class NoneLicense {
<b>Summary</b>
Concrete class representing an assertion that no license information is
present, as applicable.
<b>Description</b>
A NoneLicense is the primary value that is used by a concludedLicense or
declaredLicense field that indicates the absence of license information
from the corresponding software Package, File or Snippet.

The specific meaning of NoneLicense in the context of a concludedLicense
or declaredLicense field is more fully set forth in the Property
definitions for those fields.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseField
    name : NoneLicense
.. properties ..
}
class OrLaterOperator {
<b>Summary</b>
Portion of an AnyLicenseInfo representing this version, or any later
version, of the indicated License.
<b>Description</b>
An OrLaterOperator indicates that this portion of the AnyLicenseInfo
represents either (1) the specified version of the corresponding
License, or (2) any later version of that License. It is represented in
the SPDX License Expression Syntax by the `+` operator.

It is context-dependent, and unspecified by SPDX, as to what constitutes
a "later version" of any particular License. Some Licenses may not be
versioned, or may not have clearly-defined ordering for versions. The
consumer of SPDX data will need to determine for themselves what meaning
to attribute to a "later version" operator for a particular License.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : OrLaterOperator
.. properties ..
    <b>subjectLicense </b>: License [1..1]
}
"License" <-[dashed,thickness=4]-- "OrLaterOperator::subjectLicense"
class WithAdditionOperator {
<b>Summary</b>
Portion of an AnyLicenseInfo representing a License which has additional
text applied to it
<b>Description</b>
A WithAdditionOperator indicates that the designated License is subject
to the designated LicenseAddition, which might be a license exception on
the SPDX Exceptions List (ListedLicenseException) or may be other
additional text (CustomLicenseAddition). It is represented in the SPDX
License Expression Syntax by the `WITH` operator.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : WithAdditionOperator
.. properties ..
    <b>subjectAddition </b>: LicenseAddition [1..1]
    <b>subjectLicense </b>: License [1..1]
}
"LicenseAddition" <-[dashed,thickness=4]-- "WithAdditionOperator::subjectAddition"
"License" <-[dashed,thickness=4]-- "WithAdditionOperator::subjectLicense"
}
"LicenseField" <|-[thickness=4]- "AnyLicenseInfo"
"AnyLicenseInfo" <|-[thickness=4]- "ConjunctiveLicenseSet"
"License" <|-[thickness=4]- "CustomLicense"
"LicenseAddition" <|-[thickness=4]- "CustomLicenseAddition"
"AnyLicenseInfo" <|-[thickness=4]- "DisjunctiveLicenseSet"
"AnyLicenseInfo" <|-[thickness=4]- "License"
"License" <|-[thickness=4]- "ListedLicense"
"LicenseAddition" <|-[thickness=4]- "ListedLicenseException"
"LicenseField" <|-[thickness=4]- "NoAssertionLicense"
"LicenseField" <|-[thickness=4]- "NoneLicense"
"AnyLicenseInfo" <|-[thickness=4]- "OrLaterOperator"
"AnyLicenseInfo" <|-[thickness=4]- "WithAdditionOperator"
@enduml
