@startuml
skinparam packageStyle rectangle
set separator none
together {
' vocabulary
enum PresenceType {
<b>Summary</b>
Categories of presence or absence.
<b>Description</b>
This type is used to indicate if a given field is present or absent or
unknown.
.. entries ..
    <b>no</b>: Indicates absence of the field.
    <b>noAssertion</b>: Makes no assertion about the field.
    <b>yes</b>: Indicates presence of the field.
}
enum SafetyRiskAssessmentType {
<b>Summary</b>
Categories of safety risk impact of the application.
<b>Description</b>
Lists the different safety risk type values that can be used to describe
the safety risk of AI software according to [Article 20 of Regulation
765/2008/EC](https://ec.europa.eu/docsroom/documents/17107/attachments/1/translations/en/renditions/pdf).
.. entries ..
    <b>high</b>: The second-highest level of risk posed by an AI software.
    <b>low</b>: Low/no risk is posed by the AI software.
    <b>medium</b>: The third-highest level of risk posed by an AI software.
    <b>serious</b>: The highest level of risk posed by an AI software.
}
' classes
together {
class AIPackage {
<b>Summary</b>
Provides information about the fields in the AI package profile.
<b>Description</b>
Metadata information that can be added to a package to describe an AI
application or trained AI model.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : /Software/Package
    name : AIPackage
.. properties ..
    <b>autonomyType </b>: PresenceType [0..1]
    <b>domain </b>: xsd:string [0..]
    <b>energyConsumption </b>: xsd:string [0..1]
    <b>hyperparameter </b>: /Core/DictionaryEntry [0..]
    <b>informationAboutApplication </b>: xsd:string [0..1]
    <b>informationAboutTraining </b>: xsd:string [0..1]
    <b>limitation </b>: xsd:string [0..1]
    <b>metric </b>: /Core/DictionaryEntry [0..]
    <b>metricDecisionThreshold </b>: /Core/DictionaryEntry [0..]
    <b>modelDataPreprocessing </b>: xsd:string [0..]
    <b>modelExplainability </b>: xsd:string [0..]
    <b>safetyRiskAssessment </b>: SafetyRiskAssessmentType [0..1]
    <b>sensitivePersonalInformation </b>: PresenceType [0..1]
    <b>standardCompliance </b>: xsd:string [0..]
    <b>typeOfModel </b>: xsd:string [0..]
}
"PresenceType" <-[dashed,thickness=4]-- "AIPackage::autonomyType"
"/Core/DictionaryEntry" <-[dashed,thickness=4]-- "AIPackage::hyperparameter"
"/Core/DictionaryEntry" <-[dashed,thickness=4]-- "AIPackage::metric"
"/Core/DictionaryEntry" <-[dashed,thickness=4]-- "AIPackage::metricDecisionThreshold"
"SafetyRiskAssessmentType" <-[dashed,thickness=4]-- "AIPackage::safetyRiskAssessment"
"PresenceType" <-[dashed,thickness=4]-- "AIPackage::sensitivePersonalInformation"
}
}
together {
' vocabulary
' classes
together {
class Build {
<b>Summary</b>
Class that describes a build instance of software/artifacts.
<b>Description</b>
A build is a representation of the process in which a piece of software
or artifact is built. It encapsulates information related to a build
process and provides an element from which relationships can be created
to describe the build's inputs, outputs, and related entities (e.g.
builders, identities, etc.).

Definitions of "BuildType", "ConfigSource", "Parameters" and
"Environment" follow those defined in [SLSA
provenance](https://slsa.dev/provenance/v0.2).

ExternalIdentifier of type "urlScheme" may be used to identify build
logs. In this case, the comment of the ExternalIdentifier should be
"LogReference".

Note that buildStart and buildEnd are optional, and may be omitted to
simplify creating reproducible builds.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : /Core/Element
    name : Build
.. properties ..
    <b>buildEndTime </b>: /Core/DateTime [0..1]
    <b>buildId </b>: xsd:string [0..1]
    <b>buildStartTime </b>: /Core/DateTime [0..1]
    <b>buildType </b>: xsd:anyURI [1..1]
    <b>configSourceDigest </b>: /Core/Hash [0..]
    <b>configSourceEntrypoint </b>: xsd:string [0..]
    <b>configSourceUri </b>: xsd:anyURI [0..]
    <b>environment </b>: /Core/DictionaryEntry [0..]
    <b>parameters </b>: /Core/DictionaryEntry [0..]
}
"/Core/DateTime" <-[dashed,thickness=4]-- "Build::buildEndTime"
"/Core/DateTime" <-[dashed,thickness=4]-- "Build::buildStartTime"
"/Core/Hash" <-[dashed,thickness=4]-- "Build::configSourceDigest"
"/Core/DictionaryEntry" <-[dashed,thickness=4]-- "Build::environment"
"/Core/DictionaryEntry" <-[dashed,thickness=4]-- "Build::parameters"
}
}
together {
' vocabulary
enum AnnotationType {
<b>Summary</b>
Specifies the type of an annotation.
<b>Description</b>
AnnotationType specifies the type of an annotation.
.. entries ..
    <b>other</b>: Used to store extra information about an Element which is not part of a
Review (e.g. extra information provided during the creation of the
Element).
    <b>review</b>: Used when someone reviews the Element.
}
enum ExternalIdentifierType {
<b>Summary</b>
Specifies the type of an external identifier.
<b>Description</b>
ExteralIdentifierType specifies the type of an external identifier.
.. entries ..
    <b>cpe22</b>: https://cpe.mitre.org/files/cpe-specification\_2.2.pdf
    <b>cpe23</b>: https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf
    <b>cve</b>: An identifier for a specific software flaw defined within the official
CVE Dictionary and that conforms to the CVE specification as defined by
https://csrc.nist.gov/glossary/term/cve\_id.
    <b>email</b>: https://datatracker.ietf.org/doc/html/rfc3696#section-3
    <b>gitoid</b>: gitoid stands for Git Object ID. A gitoid of typeblob is a unique hash
of a software artifact. Git relies on a Merkle Tree to index stored
objects. See https://git-scm.com/book/en/v2/Git-Internals-Git-Objects.
GitBOM is an amalgam of the terms "Git" and "SBOM". GitBOM is a
minimalistic schema to describe software dependency graphs using a
Merkle Tree, and is inspired by Git. A gitoid may refer to either the
software artifact or its GitBOM document; this ambiguity exists because
the GitBOM document is itself an artifact, and the gitoid of that
artifact is its valid locator.
    <b>other</b>: Used when the type doesn't match any of the other options.
    <b>pkgUrl</b>: https://github.com/package-url/purl-spec
    <b>securityOther</b>: Used when there is a security related identifier of unspecified type.
    <b>swhid</b>: https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html
    <b>swid</b>: https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.html#section-2.3
    <b>urlScheme</b>: the scheme used in order to locate a resource
https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml
}
enum ExternalReferenceType {
<b>Summary</b>
Specifies the type of an external reference.
<b>Description</b>
ExteralReferenceType specifies the type of an external reference.
.. entries ..
    <b>altDownloadLocation</b>: A reference to an alternative download location.
    <b>altWebPage</b>: A reference to an alternative web page.
    <b>binaryArtifact</b>: A reference to binary artifacts related to a package.
    <b>buildMeta</b>: A reference build metadata related to a published package.
    <b>buildSystem</b>: A reference build system used to create or publish the package.
    <b>certificationReport</b>: A reference to a certification report for a package from an
accredited/independent body.
    <b>chat</b>: A reference to the instant messaging system used by the maintainer for a
package.
    <b>componentAnalysisReport</b>: A reference to a Software Composition Analysis (SCA) report.
    <b>documentation</b>: A reference to the documentation for a package.
    <b>dynamicAnalysisReport</b>: A reference to a dynamic analysis report for a package.
    <b>eolNotice</b>: A reference to the End Of Sale (EOS) and/or End Of Life (EOL)
information related to a package.
    <b>funding</b>: A reference to funding information related to a package.
    <b>issueTracker</b>: A reference to the issue tracker for a package.
    <b>license</b>: A reference to additional license information related to an artifact.
    <b>mailingList</b>: A reference to the mailing list used by the maintainer for a package.
    <b>metrics</b>: A reference to metrics related to package such as OpenSSF scorecards.
    <b>other</b>: Used when the type doesn't match any of the other options.
    <b>productMetadata</b>: A reference to additional product metadata such as reference within
organization's product catalog.
    <b>qualityAssessmentReport</b>: A reference to a quality assessment for a package.
    <b>releaseHistory</b>: A reference to a published list of releases for a package.
    <b>releaseNotes</b>: A reference to the release notes for a package.
    <b>riskAssessment</b>: A reference to a risk assessment for a package.
    <b>runtimeAnalysisReport</b>: A reference to a runtime analysis report for a package.
    <b>secureSoftwareAttestation</b>: A reference to information assuring that the software is developed using
security practices as defined by [NIST SP 800-218 Secure Software
Development Framework
(SSDF)](https://csrc.nist.gov/publications/detail/sp/800-218/final) or
[CISA Secure Software Development Attestation
Form](https://www.cisa.gov/sites/default/files/2023-04/secure-software-self-attestation_common-form_508.pdf).
    <b>securityAdversaryModel</b>: A reference to the security adversary model for a package.
    <b>securityAdvisory</b>: A reference to a published security advisory (where advisory as defined
per ISO 29147:2018) that may affect one or more elements, e.g., vendor
advisories or specific NVD entries.
    <b>securityFix</b>: A reference to the patch or source code that fixes a vulnerability.
    <b>securityOther</b>: A reference to related security information of unspecified type.
    <b>securityPenTestReport</b>: A reference to a [penetration
test](https://en.wikipedia.org/wiki/Penetration_test) report for a
package.
    <b>securityPolicy</b>: A reference to instructions for reporting newly discovered security
vulnerabilities for a package.
    <b>securityThreatModel</b>: A reference the [security threat
model](https://en.wikipedia.org/wiki/Threat_model) for a package.
    <b>socialMedia</b>: A reference to a social media channel for a package.
    <b>sourceArtifact</b>: A reference to an artifact containing the sources for a package.
    <b>staticAnalysisReport</b>: A reference to a static analysis report for a package.
    <b>support</b>: A reference to the software support channel or other support information
for a package.
    <b>vcs</b>: A reference to a version control system related to a software artifact.
    <b>vulnerabilityDisclosureReport</b>: A reference to a Vulnerability Disclosure Report (VDR) which provides
the software supplier's analysis and findings describing the impact (or
lack of impact) that reported vulnerabilities have on packages or
products in the supplier's SBOM as defined in [NIST SP
800-161](https://csrc.nist.gov/publications/detail/sp/800-161/rev-1/final).
    <b>vulnerabilityExploitabilityAssessment</b>: A reference to a Vulnerability Exploitability eXchange (VEX) statement
which provides information on whether a product is impacted by a
specific vulnerability in an included package and, if affected, whether
there are actions recommended to remediate. See also [NTIA VEX
one-page](https://ntia.gov/files/ntia/publications/vex_one-page_summary.pdf)..
}
enum HashAlgorithm {
<b>Summary</b>
A mathematical algorithm that maps data of arbitrary size to a bit
string.
<b>Description</b>
A HashAlgorithm is a mathematical algorithm that maps data of arbitrary
size to a bit string (the hash) and is a one-way function, that is, a
function which is practically infeasible to invert.
.. entries ..
    <b>blake2b256</b>: blake2b algorithm with a digest size of 256
https://datatracker.ietf.org/doc/html/rfc7693#section-4
    <b>blake2b384</b>: blake2b algorithm with a digest size of 384
https://datatracker.ietf.org/doc/html/rfc7693#section-4
    <b>blake2b512</b>: blake2b algorithm with a digest size of 512
https://datatracker.ietf.org/doc/html/rfc7693#section-4
    <b>blake3</b>: https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf
    <b>crystalsDilithium</b>: https://pq-crystals.org/dilithium/index.shtml
    <b>crystalsKyber</b>: https://pq-crystals.org/kyber/index.shtml
    <b>falcon</b>: https://falcon-sign.info/falcon.pdf
    <b>md2</b>: https://datatracker.ietf.org/doc/rfc1319/
    <b>md4</b>: https://datatracker.ietf.org/doc/html/rfc1186
    <b>md5</b>: https://datatracker.ietf.org/doc/html/rfc1321
    <b>md6</b>: https://people.csail.mit.edu/rivest/pubs/RABCx08.pdf
    <b>other</b>: any hashing algorithm that does not exist in this list of entries
    <b>sha1</b>: https://datatracker.ietf.org/doc/html/rfc3174
    <b>sha224</b>: secure hashing algorithm with a digest length of 224
https://datatracker.ietf.org/doc/html/draft-ietf-pkix-sha224-01
    <b>sha256</b>: secure hashing algorithm with a digest length of 256
https://www.rfc-editor.org/rfc/rfc4634
    <b>sha384</b>: secure hashing algorithm with a digest length of 384
https://www.rfc-editor.org/rfc/rfc4634
    <b>sha3_224</b>: sha3 with a digest length of 224
https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    <b>sha3_256</b>: sha3 with a digest length of 256
https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    <b>sha3_384</b>: sha3 with a digest length of 384
https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    <b>sha3_512</b>: sha3 with a digest length of 512
https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    <b>sha512</b>: secure hashing algorithm with a digest length of 512
https://www.rfc-editor.org/rfc/rfc4634
    <b>spdxPvcSha1</b>: TODOdescription
    <b>spdxPvcSha256</b>: TODOdescription
    <b>sphincsPlus</b>: TODOdescription
}
enum LifecycleScopeType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>build</b>: TODOdescription
    <b>design</b>: TODOdescription
    <b>development</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>runtime</b>: TODOdescription
    <b>test</b>: TODOdescription
}
enum ProfileIdentifierType {
<b>Summary</b>
Enumeration of the valid profiles that an element can be specified to be
part of.
<b>Description</b>
There are a set of profiles that have been defined to be valid for a
specific release This file enumerates the values that have been agreed
on, and may be applied to the creation information for an an element.
.. entries ..
    <b>ai</b>: the element follows the AI profile specification
    <b>build</b>: the element follows the Build profile specification
    <b>core</b>: the element follows the Core profile specification
    <b>dataset</b>: the element follows the Dataset profile specification
    <b>extension</b>: the element follows the Extension profile specification
    <b>licensing</b>: the element follows the Licensing profile specification
    <b>security</b>: the element follows the Security profile specification
    <b>software</b>: the element follows the Software profile specification
    <b>usage</b>: the element follows the Usage profile specification
}
enum RelationshipCompleteness {
<b>Summary</b>
Indicates whether a relationship is complete or known to be incomplete
or if there is made no assertion either way.
<b>Description</b>
RelationshipCompleteness indicates whether a relationship is complete or
known to be incomplete or if there is made no assertion either way.
.. entries ..
    <b>complete</b>: The relationship is known to be exhaustive.
    <b>incomplete</b>: The relationship is known not to be exhaustive.
    <b>noAssertion</b>: There can be made no assertion about the completeness of the
relationship.
}
enum RelationshipType {
<b>Summary</b>
Information about the relationship between two Elements.
<b>Description</b>
Provides information about the relationship between two Elements. For
example, you can represent a relationship between two different Files,
between a Package and a File, between two Packages, or between one
SPDXDocument and another SPDXDocument.

Build Profile specific RelationshipType descriptions can be found
[here](https://github.com/spdx/spdx-3-build-profile/blob/main/model/relationships.md)
.. entries ..
    <b>affects</b>: (Security/VEX) Designates one or more elements as affected by a
vulnerability
    <b>amends</b>: Every `to` Element amends the `from` Element
    <b>ancestor</b>: Every `to` Element is an ancestor of the `from` Element
    <b>availableFrom</b>: This relationship is used to identify additional suppliers where an
artifact is available from.
    <b>buildConfigOf</b>: Build configuration of the build instance
    <b>buildDependency</b>: Every `to` Element is a build dependency of the `from` Element
    <b>buildHostOf</b>: Element in which the build instance runs on
    <b>buildInputOf</b>: Input to the build instance
    <b>buildInvokedBy</b>: Agent that invoked the build
    <b>buildOnBehalfOf</b>: Actor for which buildInvokedBy is acting on behalf of
    <b>buildOutputOf</b>: Output of the build instance
    <b>buildTool</b>: Build tool used to build an Element. This may be used to describe the
build tool of a Build instance
    <b>contains</b>: Every `to` Element is contained by the `from` Element
    <b>coordinatedBy</b>: (Security) Used to identify the vendor, researcher, or consumer agent
performing coordination for a vulnerability
    <b>copy</b>: Every `to` Element is a copy of the `from` Element
    <b>dataFile</b>: Every `to` Element is a data file related to the the `from` Element
    <b>dependencyManifest</b>: Every `to` Element is manifest file containing dependency information
related to the `from` Element
    <b>dependsOn</b>: Every `to` Element is a dependecy of the `from` Element
    <b>descendant</b>: This relationship may be used to describe child builds of a Build
instance.
    <b>describes</b>: Every `to` Element is described by the `from` Element. This can be used
to denote the root(s) of a tree of elements contained in an SBOM.
    <b>devDependency</b>: Every `to` Element is a development dependency for the `from` Element
    <b>devTool</b>: Every `to` Element is a development tool for the `from` Element
    <b>distributionArtifact</b>: Every `to` Element is an artifact intended for distribution of the
`from` Element (e.g. an RPM or archive file)
    <b>documentation</b>: Every `to` Element is documentation for the `from` Element
    <b>doesNotAffect</b>: (Security/VEX) Specifies a vulnerability has no impact on one or more
elements
    <b>dynamicLink</b>: Every `to` Element is dynamically linked to the `from` Element
    <b>evidenceFor</b>: (Dataset) Every `to` Element is can be considered as evidence for the
`from` Element
    <b>example</b>: Every `to` Element is an example for the `from` Element
    <b>expandedFromArchive</b>: Every `to` Element is an artifact expanded from the `from` archive file
    <b>exploitCreatedBy</b>: (Security) Designates an agent has created an exploit against a
vulnerability
    <b>fileAdded</b>: Every `to` Element is is a file added to the `from` Element
    <b>fileDeleted</b>: Every `to` Element is a file deleted from the `from` Element
    <b>fileModified</b>: Every `to` Element is a modification of the `from` Element
    <b>fixedBy</b>: (Security) Designates a vulnerability has been fixed by an agent
    <b>fixedIn</b>: (Security/VEX) A vulnerability has been fixed in one or more elements
    <b>foundBy</b>: (Security) Designates an agent was the original discoverer of a security
vulnerability
    <b>generates</b>: Every `to` Element is generated from the `from` Element
    <b>hasAssessmentFor</b>: (Security) Relates a Vulnerability and an Element with a security
assessment.
    <b>hasAssociatedVulnerability</b>: (Security) Used to associate a security vulnerability with a software
artifact
    <b>metafile</b>: Every `to` Element is is a file containing metadata about the `from`
Element
    <b>optionalComponent</b>: Every `to` Element is an optional component of the `from` Element
    <b>optionalDependency</b>: Every `to` Element is an optional dependency of the `from` Element
    <b>other</b>: Every `to` Element is related to the `from` Element where the
relationship type is not described by any of the SPDX relationhip types
    <b>packages</b>: Every `to` Element is a packaged form of the `from` Element
    <b>patch</b>: Every `to` Element is a patch for the `from` Element
    <b>prerequisite</b>: Every `to` Element is a prerequisite of the `from` Element
    <b>providedDependency</b>: Every `to` Element is a dependency not included in the distributed
artifact but is assumed to be provided the `from` Element
    <b>publishedBy</b>: (Security) Designates the agent that made a vulnerability record
available for public use or reference
    <b>reportedBy</b>: (Security) Designates the agent that first reported a vulnerability to
the project, vendor, or tracking database for formal identification
    <b>republishedBy</b>: (Security) Designates the agent that tracked, aggregated, and/or
enriched vulnerability details to improve context (i.e. NVD)
    <b>requirementFor</b>: Every `to` Element is required for the `from` Element
    <b>runtimeDependency</b>: Every `to` Element is a runtime dependency for the `from` Element
    <b>specificationFor</b>: Every `to` Element is a specification for the `from` Element
    <b>staticLink</b>: Every `to` Element is statically linked to the `from` Element
    <b>test</b>: Every `to` Element is a test artifact for the `from` Element
    <b>testCase</b>: Every `to` Element is a test case for the `from` Element
    <b>testDependency</b>: Every `to` Element is a test dependency for the `from` Element
    <b>testTool</b>: Every `to` Element is a test tool for the `from` Element
    <b>testedOn</b>: (AI, Dataset) The `from` Element has been tested on the `to` Element
    <b>trainedOn</b>: (AI, Dataset) The `from` Element has been trained by the `to` Element(s)
    <b>underInvestigationFor</b>: (Security/VEX) The impact of a vulnerability is being investigated
    <b>variant</b>: Every `to` Element is a variant the `from` Element
}
' classes
together {
class Agent {
<b>Summary</b>
Agent represents anything with the potential to act on a system.
<b>Description</b>
The Agent class represents anything that has the potential to act on a
system. This could be a person, organization, software agent, etc. This
is not to be confused with tools that are used to perform tasks.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Element
    name : Agent
.. properties ..
}
class Annotation {
<b>Summary</b>
An assertion made in relation to one or more elements.
<b>Description</b>
An Annotation is an assertion made in relation to one or more elements.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Element
    name : Annotation
.. properties ..
    <b>annotationType </b>: AnnotationType [1..1]
    <b>contentType </b>: MediaType 
    <b>statement </b>: xsd:string [0..1]
    <b>subject </b>: Element [1..1]
}
"AnnotationType" <-[dashed,thickness=4]-- "Annotation::annotationType"
"MediaType" <-[dashed,thickness=4]-- "Annotation::contentType"
"Element" <-[dashed,thickness=4]-- "Annotation::subject"
class AnonymousPayload {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Payload
    name : AnonymousPayload
.. properties ..
    <b>creationInfo </b>: CreationInfo [0..1]
    <b>imports </b>: ExternalMap 
    <b>namespaces </b>: NamespaceMap 
}
"CreationInfo" <-[dashed,thickness=4]-- "AnonymousPayload::creationInfo"
"ExternalMap" <-[dashed,thickness=4]-- "AnonymousPayload::imports"
"NamespaceMap" <-[dashed,thickness=4]-- "AnonymousPayload::namespaces"
abstract Artifact {
<b>Summary</b>
A distinct article or unit within the digital domain.
<b>Description</b>
An artifact is a distinct article or unit within the digital domain,
such as an electronic file, a software package, a device or an element
of data.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : Element
    name : Artifact
.. properties ..
    <b>builtTime </b>: DateTime [0..1]
    <b>originatedBy </b>: Agent [0..]
    <b>releaseTime </b>: DateTime [0..1]
    <b>standard </b>: xsd:string [0..]
    <b>suppliedBy </b>: Agent [0..]
    <b>validUntilTime </b>: DateTime [0..1]
}
"DateTime" <-[dashed,thickness=4]-- "Artifact::builtTime"
"Agent" <-[dashed,thickness=4]-- "Artifact::originatedBy"
"DateTime" <-[dashed,thickness=4]-- "Artifact::releaseTime"
"Agent" <-[dashed,thickness=4]-- "Artifact::suppliedBy"
"DateTime" <-[dashed,thickness=4]-- "Artifact::validUntilTime"
class Bom {
<b>Summary</b>
A container for a grouping of SPDX-3.0 content characterizing details
(provenence, composition, licensing, etc.) about a product.
<b>Description</b>
A Bill Of Materials (BOM) is a container for a grouping of SPDX-3.0
content characterizing details about a product. This could include
details of the content and composition of the product, provenence
details of the product and/or its composition, licensing information,
known quality or security issues, etc.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Bundle
    name : Bom
.. properties ..
}
class Bundle {
<b>Summary</b>
A collection of Elements that have a shared context.
<b>Description</b>
A bundle is a collection of Elements that have a shared context.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : ElementCollection
    name : Bundle
.. properties ..
    <b>context </b>: xsd:string [..1]
}
class CreationInfo {
<b>Summary</b>
Provides information about the creation of the Element.
<b>Description</b>
The CreationInfo provides information about who created the Element, and
when and how it was created.

The dateTime created is often the date of last change (e.g., a git
commit date), not the date when the SPDX data was created, as doing so
supports reproducible builds.
.. metadata ..
    Instantiability : Concrete
    name : CreationInfo
.. properties ..
    <b>comment </b>: xsd:string [0..1]
    <b>created </b>: DateTime 
    <b>createdBy </b>: Agent [1..]
    <b>createdUsing </b>: Tool [0..]
    <b>dataLicense </b>: xsd:string 
    <b>profile </b>: ProfileIdentifierType [1..]
    <b>specVersion </b>: SemVer 
}
"DateTime" <-[dashed,thickness=4]-- "CreationInfo::created"
"Agent" <-[dashed,thickness=4]-- "CreationInfo::createdBy"
"Tool" <-[dashed,thickness=4]-- "CreationInfo::createdUsing"
"ProfileIdentifierType" <-[dashed,thickness=4]-- "CreationInfo::profile"
"SemVer" <-[dashed,thickness=4]-- "CreationInfo::specVersion"
class DateTime {
<b>Summary</b>
A string representing a specific date and time.
<b>Description</b>
A Datetime is a string representation of a specific date and time. It
has resolution of seconds and is always expressed in UTC timezone. The
specific format is one of the most commonly used ISO-8601 formats.
.. metadata ..
    SubclassOf : xsd:string
    name : DateTime
.. properties ..
}
class DictionaryEntry {
<b>Summary</b>
A key with an associated value.
<b>Description</b>
The class used for implementing a generic string mapping (also known as
associative array, dictionary, or hash map) in SPDX. Each
DictionaryEntry contains a key-value pair which maps the key to its
associated value. To implement a dictionary, this class is to be used in
a collection with unique keys.
.. metadata ..
    Instantiability : Concrete
    name : DictionaryEntry
.. properties ..
    <b>key </b>: xsd:string [1..1]
    <b>value </b>: xsd:string [..1]
}
abstract Element {
<b>Summary</b>
Base domain class from which all other SPDX-3.0 domain classes derive.
<b>Description</b>
An Element is a representation of a fundamental concept either directly
inherent to the Bill of Materials (BOM) domain or indirectly related to
the BOM domain and necessary for contextually characterizing BOM
concepts and relationships. Within SPDX-3.0 structure this is the base
class acting as a consistent, unifying, and interoperable foundation for
all explicit and inter-relatable content objects.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : Payload
    name : Element
.. properties ..
    <b>comment </b>: xsd:string [..1]
    <b>creationInfo </b>: CreationInfo [0..1]
    <b>description </b>: xsd:string [..1]
    <b>extension </b>: Extension [0..]
    <b>externalIdentifier </b>: ExternalIdentifier [0..]
    <b>externalReference </b>: ExternalReference [0..]
    <b>name </b>: xsd:string [..1]
    <b>spdxId </b>: xsd:anyURI [1..1]
    <b>summary </b>: xsd:string [..1]
    <b>verifiedUsing </b>: IntegrityMethod 
}
"CreationInfo" <-[dashed,thickness=4]-- "Element::creationInfo"
"Extension" <-[dashed,thickness=4]-- "Element::extension"
"ExternalIdentifier" <-[dashed,thickness=4]-- "Element::externalIdentifier"
"ExternalReference" <-[dashed,thickness=4]-- "Element::externalReference"
"IntegrityMethod" <-[dashed,thickness=4]-- "Element::verifiedUsing"
abstract ElementCollection {
<b>Summary</b>
A collection of Elements, not necessarily with unifying context.
<b>Description</b>
An SpdxCollection is a collection of Elements, not necessarily with
unifying context.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : Element
    name : ElementCollection
.. properties ..
    <b>element </b>: Element [1..]
    <b>imports </b>: ExternalMap 
    <b>namespaces </b>: NamespaceMap 
    <b>rootElement </b>: Element [1..]
}
"Element" <-[dashed,thickness=4]-- "ElementCollection::element"
"ExternalMap" <-[dashed,thickness=4]-- "ElementCollection::imports"
"NamespaceMap" <-[dashed,thickness=4]-- "ElementCollection::namespaces"
"Element" <-[dashed,thickness=4]-- "ElementCollection::rootElement"
class ExternalIdentifier {
<b>Summary</b>
A reference to a resource outside the scope of SPDX-3.0 content that
uniquely identifies an Element.
<b>Description</b>
An ExternalIdentifier is a reference to a resource outside the scope of
SPDX-3.0 content that uniquely identifies an Element.
.. metadata ..
    Instantiability : Concrete
    name : ExternalIdentifier
.. properties ..
    <b>comment </b>: xsd:string [0..1]
    <b>externalIdentifierType </b>: ExternalIdentifierType [1..1]
    <b>identifier </b>: xsd:string [1..1]
    <b>identifierLocator </b>: xsd:anyURI [0..]
    <b>issuingAuthority </b>: xsd:anyURI [0..1]
}
"ExternalIdentifierType" <-[dashed,thickness=4]-- "ExternalIdentifier::externalIdentifierType"
class ExternalMap {
<b>Summary</b>
A map of Element identifiers that are used within a Document but defined
external to that Document.
<b>Description</b>
An External Map is a map of Element identifiers that are used within a
Document but defined external to that Document. The external map
provides details about the externally-defined Element such as its
provenance, where to retrieve it, and how to verify its integrity.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : none
    name : ExternalMap
.. properties ..
    <b>definingDocument </b>: xsd:anyURI [..1]
    <b>externalId </b>: xsd:anyURI [1..1]
    <b>locationHint </b>: xsd:anyURI [..1]
    <b>verifiedUsing </b>: IntegrityMethod 
}
"IntegrityMethod" <-[dashed,thickness=4]-- "ExternalMap::verifiedUsing"
class ExternalReference {
<b>Summary</b>
A reference to a resource outside the scope of SPDX-3.0 content.
<b>Description</b>
An External Reference points to a resource outside the scope of the
SPDX-3.0 content that provides additional characteristics of an Element.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : none
    name : ExternalReference
.. properties ..
    <b>comment </b>: xsd:string [..1]
    <b>contentType </b>: MediaType [..1]
    <b>externalReferenceType </b>: ExternalReferenceType [..1]
    <b>locator </b>: xsd:anyURI 
}
"MediaType" <-[dashed,thickness=4]-- "ExternalReference::contentType"
"ExternalReferenceType" <-[dashed,thickness=4]-- "ExternalReference::externalReferenceType"
class Hash {
<b>Summary</b>
A mathematically calculated representation of a grouping of data.
<b>Description</b>
A hash is a grouping of characteristics unique to the result of applying
a mathematical algorithm that maps data of arbitrary size to a bit
string (the hash) and is a one-way function, that is, a function which
is practically infeasible to invert. This is commonly used for integrity
checking of data.
.. metadata ..
    SubclassOf : IntegrityMethod
    name : Hash
.. properties ..
    <b>algorithm </b>: HashAlgorithm [1..1]
    <b>hashValue </b>: xsd:string [1..1]
}
"HashAlgorithm" <-[dashed,thickness=4]-- "Hash::algorithm"
abstract IntegrityMethod {
<b>Summary</b>
Provides an independently reproducible mechanism that permits
verification of a specific Element.
<b>Description</b>
An IntegrityMethod provides an independently reproducible mechanism that
permits verification of a specific Element that correlates to the data
in this SPDX document. This identifier enables a recipient to determine
if anything in the original Element has been changed and eliminates
confusion over which version or modification of a specific Element is
referenced.
.. metadata ..
    Instantiability : Abstract
    name : IntegrityMethod
.. properties ..
    <b>comment </b>: xsd:string [..1]
}
class LifecycleScopedRelationship {
<b>Summary</b>
MISSING
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Relationship
    name : LifecycleScopedRelationship
.. properties ..
    <b>scope </b>: LifecycleScopeType [0..1]
}
"LifecycleScopeType" <-[dashed,thickness=4]-- "LifecycleScopedRelationship::scope"
class MediaType {
<b>Summary</b>
Standardized way of indicating the type of content of an Element. A
String constrained to the RFC 2046 specification.
<b>Description</b>
The MediaType is a String constrained to the RFC 2046 specification. It
provides a standardized way of indicating the type of content of an
Element. A list of all possible media types is available at
https://www.iana.org/assignments/media-types/media-types.xhtml.
.. metadata ..
    SubclassOf : xsd:string
    name : MediaType
.. properties ..
}
class NamespaceMap {
<b>Summary</b>
A mapping between prefixes and namespace URIs.
<b>Description</b>
A namespace map allows the creator of a collection of Elements to use
shorter identifiers ("prefixes") instead of URIs to provide a more
human-readable and smaller serialized representation of the Elements.
.. metadata ..
    Instantiability : Concrete
    name : NamespaceMap
.. properties ..
    <b>namespace </b>: xsd:anyURI [1..1]
    <b>prefix </b>: xsd:string [1..1]
}
class Organization {
<b>Summary</b>
A group of people who work together in an organized way for a shared
purpose.
<b>Description</b>
An Organization is a group of people who work together in an organized
way for a shared purpose.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Agent
    name : Organization
.. properties ..
}
abstract Payload {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : Payload
.. properties ..
    <b>creationInfo </b>: CreationInfo [0..1]
    <b>imports </b>: ExternalMap 
    <b>namespaces </b>: NamespaceMap 
}
"CreationInfo" <-[dashed,thickness=4]-- "Payload::creationInfo"
"ExternalMap" <-[dashed,thickness=4]-- "Payload::imports"
"NamespaceMap" <-[dashed,thickness=4]-- "Payload::namespaces"
class Person {
<b>Summary</b>
An individual human being.
<b>Description</b>
A Person is an individual human being.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Agent
    name : Person
.. properties ..
}
class PositiveIntegerRange {
<b>Summary</b>
A tuple of two positive integers that define a range.
<b>Description</b>
PositiveIntegerRange is a tuple of two positive integers that define a
range. "begin" must be less than or equal to "end".
.. metadata ..
    Instantiability : Concrete
    SubclassOf : none
    name : PositiveIntegerRange
.. properties ..
    <b>begin </b>: xsd:positiveInteger [1..1]
    <b>end </b>: xsd:positiveInteger [1..1]
}
class Relationship {
<b>Summary</b>
Describes a relationship between one or more elements.
<b>Description</b>
A Relationship is a grouping of characteristics unique to an assertion
that one Element is related to one or more other Elements in some way.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Element
    name : Relationship
.. properties ..
    <b>completeness </b>: RelationshipCompleteness [0..1]
    <b>endTime </b>: DateTime [0..1]
    <b>from </b>: Element [1..1]
    <b>relationshipType </b>: RelationshipType [1..1]
    <b>startTime </b>: DateTime [0..1]
    <b>to </b>: Element [0..]
}
"RelationshipCompleteness" <-[dashed,thickness=4]-- "Relationship::completeness"
"DateTime" <-[dashed,thickness=4]-- "Relationship::endTime"
"Element" <-[dashed,thickness=4]-- "Relationship::from"
"RelationshipType" <-[dashed,thickness=4]-- "Relationship::relationshipType"
"DateTime" <-[dashed,thickness=4]-- "Relationship::startTime"
"Element" <-[dashed,thickness=4]-- "Relationship::to"
class SemVer {
<b>Summary</b>
A string constrained to the SemVer 2.0.0 specification.
<b>Description</b>
The semantic version is a string that is following the specification of
[Semantic Versioning 2.0.0](https://semver.org/).
.. metadata ..
    SubclassOf : xsd:string
    name : SemVer
.. properties ..
}
class SoftwareAgent {
<b>Summary</b>
A software agent.
<b>Description</b>
A SoftwareAgent is a software program that is given the authority
(similar to a user's authority) to act on a system.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Agent
    name : SoftwareAgent
.. properties ..
}
class SpdxDocument {
<b>Summary</b>
Assembles a collection of Elements under a common string, the name of
the document.
<b>Description</b>
An SpdxDocument assembles a collection of Elements under a common
string, the name of the document. Commonly used when representing a unit
of transfer of SPDX Elements.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Bundle
    name : SpdxDocument
.. properties ..
    <b>name </b>: xsd:string [1..1]
}
class Tool {
<b>Summary</b>
An element of hardware and/or software utilized to carry out a
particular function.
<b>Description</b>
A Tool is an element of hardware and/or software utilized to carry out a
particular function.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Element
    name : Tool
.. properties ..
}
}
}
together {
' vocabulary
enum ConfidentialityLevelType {
<b>Summary</b>
Categories of confidentiality level.
<b>Description</b>
Describes the different confidentiality levels as given by the [Traffic
Light Protocol](https://en.wikipedia.org/wiki/Traffic_Light_Protocol).
.. entries ..
    <b>Amber</b>: Data points in the dataset can be shared only with specific
organizations and their clients on a need to know basis.
    <b>Clear</b>: Dataset may be distributed freely, without restriction.
    <b>Green</b>: Dataset can be shared within a community of peers and partners.
    <b>Red</b>: Data points in the dataset are highly confidential and can only be
shared with named recipients.
}
enum DatasetAvailabilityType {
<b>Summary</b>
Availability of dataset
<b>Description</b>
Describes the possible types of availability of a dataset, indicating
whether the dataset can be directly downloaded, can be assembled using a
script for scraping the data, is only available after a clickthrough or
a registration form.
.. entries ..
    <b>Clickthrough</b>: the dataset is not publicly available and can only be accessed after
affirmatively accepting terms on a clickthrough webpage.
    <b>Direct-Download</b>: the dataset is publicly available and can be downloaded directly.
    <b>Query</b>: the dataset is publicly available, but not all at once, and can only be
accessed through queries which return parts of the dataset.
    <b>Registration</b>: the dataset is not publicly available and an email registration is
required before accessing the dataset, although without an affirmative
acceptance of terms.
    <b>Scraping-Script</b>: the dataset provider is not making available the underlying data and the
dataset must be reassembled, typically using the provided script for
scraping the data.
}
' classes
together {
class Dataset {
<b>Summary</b>
Provides information about the fields in the Dataset profile.
<b>Description</b>
Metadata information that can be added to a dataset that may be used in
a software or to train/test an AI package.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : /Software/Package
    name : Dataset
.. properties ..
    <b>anonymizationMethodUsed </b>: xsd:string [0..]
    <b>confidentialityLevel </b>: ConfidentialityLevelType [0..1]
    <b>dataCollectionProcess </b>: xsd:string [0..1]
    <b>dataPreprocessing </b>: xsd:string [0..]
    <b>datasetAvailability </b>: DatasetAvailabilityType [0..1]
    <b>datasetNoise </b>: xsd:string [0..1]
    <b>datasetSize </b>: xsd:nonNegativeInteger [0..1]
    <b>datasetType </b>: xsd:string [1..1]
    <b>datasetUpdateMechanism </b>: xsd:string [0..1]
    <b>intendedUse </b>: xsd:string [0..1]
    <b>knownBias </b>: xsd:string [0..]
    <b>sensitivePersonalInformation </b>: PresenceType [0..1]
    <b>sensor </b>: /Core/DictionaryEntry [0..]
}
"ConfidentialityLevelType" <-[dashed,thickness=4]-- "Dataset::confidentialityLevel"
"DatasetAvailabilityType" <-[dashed,thickness=4]-- "Dataset::datasetAvailability"
"PresenceType" <-[dashed,thickness=4]-- "Dataset::sensitivePersonalInformation"
"/Core/DictionaryEntry" <-[dashed,thickness=4]-- "Dataset::sensor"
}
}
together {
' vocabulary
' classes
together {
abstract AnyLicenseInfo {
<b>Summary</b>
Abstract class representing a license combination consisting of one or
more licenses (optionally including additional text), which may be
combined according to the SPDX license expression syntax.
<b>Description</b>
An AnyLicenseInfo is used by a licensing field for a software package,
file or snippet when its value is not NOASSERTION or NONE. It can be a
single license (either on the SPDX License List or a custom-defined
license); a single license with an "or later" operator applied; the
foregoing with additional text applied; or a set of licenses combined by
applying "AND" and "OR" operators recursively.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : LicenseField
    name : AnyLicenseInfo
.. properties ..
}
class ConjunctiveLicenseSet {
<b>Summary</b>
Portion of an AnyLicenseInfo representing a set of licensing information
where all elements apply.
<b>Description</b>
A ConjunctiveLicenseSet indicates that *each* of its subsidiary
AnyLicenseInfos apply. In other words, a ConjunctiveLicenseSet of two or
more licenses represents a licensing situation where *all* of the
specified licenses are to be complied with. It is represented in the
SPDX License Expression Syntax by the `AND` operator.

It is syntactically correct to specify a ConjunctiveLicenseSet where the
subsidiary AnyLicenseInfos may be "incompatible" according to a
particular interpretation of the corresponding Licenses. The SPDX
License Expression Syntax does not take into account interpretation of
license texts, which is left to the consumer of SPDX data to determine
for themselves.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : ConjunctiveLicenseSet
.. properties ..
    <b>member </b>: AnyLicenseInfo [2..]
}
"AnyLicenseInfo" <-[dashed,thickness=4]-- "ConjunctiveLicenseSet::member"
class CustomLicense {
<b>Summary</b>
A license that is not listed on the SPDX License List.
<b>Description</b>
A CustomLicense represents a License that is not listed on the SPDX
License List at https://spdx.org/licenses, and is therefore defined by
an SPDX data creator.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : License
    name : CustomLicense
.. properties ..
}
class CustomLicenseAddition {
<b>Summary</b>
A license addition that is not listed on the SPDX Exceptions List.
<b>Description</b>
A CustomLicenseAddition represents an addition to a License that is not
listed on the SPDX Exceptions List at
https://spdx.org/licenses/exceptions-index.html, and is therefore
defined by an SPDX data creator.

It is intended to represent additional language which is meant to be
added to a License, but which is not itself a standalone License.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseAddition
    name : CustomLicenseAddition
.. properties ..
}
class DisjunctiveLicenseSet {
<b>Summary</b>
Portion of an AnyLicenseInfo representing a set of licensing information
where only any one of the elements applies.
<b>Description</b>
A DisjunctiveLicenseSet indicates that *only one* of its subsidiary
AnyLicenseInfos is required to apply. In other words, a
DisjunctiveLicenseSet of two or more licenses represents a licensing
situation where *only one* of the specified licenses are to be complied
with. A consumer of SPDX data would typically understand this to permit
the recipient of the licensed content to choose which of the
corresponding license they would prefer to use. It is represented in the
SPDX License Expression Syntax by the `OR` operator.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : DisjunctiveLicenseSet
.. properties ..
    <b>member </b>: AnyLicenseInfo [2..]
}
"AnyLicenseInfo" <-[dashed,thickness=4]-- "DisjunctiveLicenseSet::member"
abstract License {
<b>Summary</b>
Abstract class for the portion of an AnyLicenseInfo representing a
license.
<b>Description</b>
A License represents a license text, whether listed on the SPDX License
List (ListedLicense) or defined by an SPDX data creator (CustomLicense).
.. metadata ..
    Instantiability : Abstract
    SubclassOf : AnyLicenseInfo
    name : License
.. properties ..
    <b>isDeprecatedLicenseId </b>: xsd:boolean [0..1]
    <b>isFsfLibre </b>: xsd:boolean [0..1]
    <b>isOsiApproved </b>: xsd:boolean [0..1]
    <b>licenseComment </b>: xsd:string [0..1]
    <b>licenseId </b>: xsd:string [1..1]
    <b>licenseName </b>: xsd:string [1..1]
    <b>licenseText </b>: xsd:string [1..1]
    <b>obsoletedBy </b>: xsd:string [0..1]
    <b>seeAlso </b>: xsd:anyURI [0..]
    <b>standardLicenseHeader </b>: xsd:string [0..1]
    <b>standardLicenseTemplate </b>: xsd:string [0..1]
}
abstract LicenseAddition {
<b>Summary</b>
Abstract class for additional text intended to be added to a License,
but which is not itself a standalone License.
<b>Description</b>
A LicenseAddition represents text which is intended to be added to a
License as additional text, but which is not itself intended to be a
standalone License.

It may be an exception which is listed on the SPDX Exceptions List
(ListedLicenseException), or may be any other additional text (as an
exception or otherwise) which is defined by an SPDX data creator
(CustomLicenseAddition).
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : LicenseAddition
.. properties ..
    <b>additionComment </b>: xsd:string [0..1]
    <b>additionId </b>: xsd:string [1..1]
    <b>additionName </b>: xsd:string [1..1]
    <b>additionText </b>: xsd:string [1..1]
    <b>isDeprecatedAdditionId </b>: xsd:boolean [0..1]
    <b>obsoletedBy </b>: xsd:string [0..1]
    <b>seeAlso </b>: xsd:anyURI [0..]
    <b>standardAdditionTemplate </b>: xsd:string [0..1]
}
abstract LicenseField {
<b>Summary</b>
Base abstract class used for all fields that can take a value of either
a license expression, NOASSERTION, or NONE.
<b>Description</b>
A LicenseField is the primary value that is used by a licensing field
for a software Package, File or Snippet. It represents either a license
expression, or the values NOASSERTION or NONE. The specific meanings of
NOASSERTION or NONE for the particular licensing field are defined in
the corresponding property description.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : LicenseField
.. properties ..
}
class ListedLicense {
<b>Summary</b>
A license that is listed on the SPDX License List.
<b>Description</b>
A ListedLicense represents a License that is listed on the SPDX License
List at https://spdx.org/licenses.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : License
    name : ListedLicense
.. properties ..
    <b>deprecatedVersion </b>: xsd:string [0..1]
    <b>listVersionAdded </b>: xsd:string [0..1]
}
class ListedLicenseException {
<b>Summary</b>
A license exception that is listed on the SPDX Exceptions list.
<b>Description</b>
A ListedLicenseException represents an exception to a License (in other
words, an exception to a license condition or an additional permission
beyond those granted in a License) which is listed on the SPDX
Exceptions List at https://spdx.org/licenses/exceptions-index.html.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseAddition
    name : ListedLicenseException
.. properties ..
    <b>deprecatedVersion </b>: xsd:string [0..1]
    <b>listVersionAdded </b>: xsd:string [0..1]
}
class NoAssertionLicense {
<b>Summary</b>
Concrete class representing an absence of an assertion about license
information.
<b>Description</b>
A NoAssertionLicense is the primary value that is used by a
concludedLicense or declaredLicense field that indicates that the SPDX
data creator is making no assertion about the license information for
the corresponding software Package, File or Snippet.

The specific meaning of NoAssertionLicense in the context of a
concludedLicense or declaredLicense field is more fully set forth in the
Property definitions for those fields.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseField
    name : NoAssertionLicense
.. properties ..
}
class NoneLicense {
<b>Summary</b>
Concrete class representing an assertion that no license information is
present, as applicable.
<b>Description</b>
A NoneLicense is the primary value that is used by a concludedLicense or
declaredLicense field that indicates the absence of license information
from the corresponding software Package, File or Snippet.

The specific meaning of NoneLicense in the context of a concludedLicense
or declaredLicense field is more fully set forth in the Property
definitions for those fields.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseField
    name : NoneLicense
.. properties ..
}
class OrLaterOperator {
<b>Summary</b>
Portion of an AnyLicenseInfo representing this version, or any later
version, of the indicated License.
<b>Description</b>
An OrLaterOperator indicates that this portion of the AnyLicenseInfo
represents either (1) the specified version of the corresponding
License, or (2) any later version of that License. It is represented in
the SPDX License Expression Syntax by the `+` operator.

It is context-dependent, and unspecified by SPDX, as to what constitutes
a "later version" of any particular License. Some Licenses may not be
versioned, or may not have clearly-defined ordering for versions. The
consumer of SPDX data will need to determine for themselves what meaning
to attribute to a "later version" operator for a particular License.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : OrLaterOperator
.. properties ..
    <b>subjectLicense </b>: License [1..1]
}
"License" <-[dashed,thickness=4]-- "OrLaterOperator::subjectLicense"
class WithAdditionOperator {
<b>Summary</b>
Portion of an AnyLicenseInfo representing a License which has additional
text applied to it
<b>Description</b>
A WithAdditionOperator indicates that the designated License is subject
to the designated LicenseAddition, which might be a license exception on
the SPDX Exceptions List (ListedLicenseException) or may be other
additional text (CustomLicenseAddition). It is represented in the SPDX
License Expression Syntax by the `WITH` operator.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : AnyLicenseInfo
    name : WithAdditionOperator
.. properties ..
    <b>subjectAddition </b>: LicenseAddition [1..1]
    <b>subjectLicense </b>: License [1..1]
}
"LicenseAddition" <-[dashed,thickness=4]-- "WithAdditionOperator::subjectAddition"
"License" <-[dashed,thickness=4]-- "WithAdditionOperator::subjectLicense"
}
}
together {
' vocabulary
enum ExploitCatalogType {
<b>Summary</b>
Specifies the exploit catalog type.
<b>Description</b>
ExploitCatalogType specifies the type of exploit catalog that a
vulnerability is listed in.
.. entries ..
    <b>kev</b>: CISA's Known Exploited Vulnerability (KEV) Catalog
    <b>other</b>: Other exploit catalogs
}
enum SsvcDecisionType {
<b>Summary</b>
Specifies the SSVC decision type.
<b>Description</b>
SsvcDecisionType specifies the type of decision that's been made
according to the Stakeholder-Specific Vulnerability Categorization
(SSVC) system
<https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc>
.. entries ..
    <b>act</b>: The vulnerability requires attention from the organization's internal,
supervisory-level and leadership-level individuals. Necessary actions
include requesting assistance or information about the vulnerability, as
well as publishing a notification either internally and/or externally.
Typically, internal groups would meet to determine the overall response
and then execute agreed upon actions. CISA recommends remediating Act
vulnerabilities as soon as possible.
    <b>attend</b>: The vulnerability requires attention from the organization's internal,
supervisory-level individuals. Necessary actions include requesting
assistance or information about the vulnerability, and may involve
publishing a notification either internally and/or externally. CISA
recommends remediating Attend vulnerabilities sooner than standard
update timelines.
    <b>track</b>: The vulnerability does not require action at this time. The organization
would continue to track the vulnerability and reassess it if new
information becomes available. CISA recommends remediating Track
vulnerabilities within standard update timelines.
    <b>trackStar</b>: (Track\* in the SSVC spec) The vulnerability contains specific
characteristics that may require closer monitoring for changes. CISA
recommends remediating Track\* vulnerabilities within standard update
timelines.
}
enum VexJustificationType {
<b>Summary</b>
Specifies the VEX justification type.
<b>Description</b>
VexJustificationType specifies the type of Vulnerability Exploitability
eXchange (VEX) justification.
.. entries ..
    <b>componentNotPresent</b>: The software is not affected because the vulnerable component is not in
the product.
    <b>inlineMitigationsAlreadyExist</b>: Built-in inline controls or mitigations prevent an adversary from
leveraging the vulnerability.
    <b>vulnerableCodeCannotBeControlledByAdversary</b>: The vulnerable component is present, and the component contains the
vulnerable code. However, vulnerable code is used in such a way that an
attacker cannot mount any anticipated attack.
    <b>vulnerableCodeNotInExecutePath</b>: The affected code is not reachable through the execution of the code,
including non-anticipated states of the product.
    <b>vulnerableCodeNotPresent</b>: The product is not affected because the code underlying the
vulnerability is not present in the product.
}
' classes
together {
class CvssV2VulnAssessmentRelationship {
<b>Summary</b>
Provides a CVSS version 2.0 assessment for a vulnerability.
<b>Description</b>
A CvssV2VulnAssessmentRelationship relationship describes the determined
score and vector of a vulnerability using version 2.0 of the Common
Vulnerability Scoring System (CVSS) as defined on
<https://www.first.org/cvss/v2/guide>. It is intented to communicate the
results of using a CVSS calculator.

**Constraints**

-   The value of severity must be one of 'low', 'medium' or 'high'
-   The relationship type must be set to hasAssessmentFor.

**Syntax**

`json {   "@type": "CvssV2VulnAssessmentRelationship",   "@id": "urn:spdx.dev:cvssv2-cve-2020-28498",   "relationshipType": "hasAssessmentFor",   "score": 4.3,   "vector": "(AV:N/AC:M/Au:N/C:P/I:N/A:N)",   "severity": "low",   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "assessedElement": "urn:npm-elliptic-6.5.2",   "externalReferences": [     {       "@type": "ExternalReference",       "externalReferenceType": "securityAdvisory",       "locator": "https://nvd.nist.gov/vuln/detail/CVE-2020-28498"     },     {       "@type": "ExternalReference",       "externalReferenceType": "securityAdvisory",       "locator": "https://snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899"     },     {       "@type": "ExternalReference",       "externalReferenceType": "securityFix",       "locator": "https://github.com/indutny/elliptic/commit/441b742"     }   ],   "suppliedBy": ["urn:spdx.dev:agent-my-security-vendor"],   "publishedTime": "2023-05-06T10:06:13Z" }, {   "@type": "Relationship",   "@id": "urn:spdx.dev:vulnAgentRel-1",     "relationshipType": "publishedBy",     "from": "urn:spdx.dev:cvssv2-cve-2020-28498",   "to": ["urn:spdx.dev:agent-snyk"],   "startTime": "2021-03-08T16:06:50Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnAssessmentRelationship
    name : CvssV2VulnAssessmentRelationship
.. properties ..
    <b>score </b>: xsd:decimal [1..1]
    <b>severity </b>: xsd:string [0..1]
    <b>vector </b>: xsd:string [0..1]
}
class CvssV3VulnAssessmentRelationship {
<b>Summary</b>
Provides a CVSS version 3.x assessment for a vulnerability.
<b>Description</b>
A CvssV3VulnAssessmentRelationship relationship describes the determined
score, severity, and vector of a vulnerability using version 3.1 of the
Common Vulnerability Scoring System (CVSS) as defined on
<https://www.first.org/cvss/v3.1/specification-document>. It is intented
to communicate the results of using a CVSS calculator.

**Constraints**

-   The value of severity must be one of 'none', 'low', 'medium', 'high'
    or 'critical'.
-   Absence of the property shall be interpreted as 'none'.
-   The relationship type must be set to hasAssessmentFor.

**Syntax**

`json {   "@type": "CvssV3VulnAssessmentRelationship",   "@id": "urn:spdx.dev:cvssv3-cve-2020-28498",   "relationshipType": "hasAssessmentFor",   "severity": "medium",   "score": 6.8,   "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N",   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "assessedElement": "urn:npm-elliptic-6.5.2",   "externalReferences": [     {       "@type": "ExternalReference",       "externalReferenceType": "securityAdvisory",       "locator": "https://nvd.nist.gov/vuln/detail/CVE-2020-28498"     },     {       "@type": "ExternalReference",       "externalReferenceType": "securityAdvisory",       "locator": "https://snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899"     },     {       "@type": "ExternalReference",       "externalReferenceType": "securityFix",       "locator": "https://github.com/indutny/elliptic/commit/441b742"     }   ],   "suppliedBy": ["urn:spdx.dev:agent-my-security-vendor"],   "publishedTime": "2023-05-06T10:06:13Z" }, {   "@type": "Relationship",   "@id": "urn:spdx.dev:vulnAgentRel-1",   "relationshipType": "publishedBy",   "from": "urn:spdx.dev:cvssv3-cve-2020-28498",   "to": "urn:spdx.dev:agent-snyk",   "startTime": "2021-03-08T16:06:50Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnAssessmentRelationship
    name : CvssV3VulnAssessmentRelationship
.. properties ..
    <b>score </b>: xsd:decimal [1..1]
    <b>severity </b>: xsd:string [0..1]
    <b>vector </b>: xsd:string [0..1]
}
class EpssVulnAssessmentRelationship {
<b>Summary</b>
Provides an EPSS assessment for a vulnerability.
<b>Description</b>
An EpssVulnAssessmentRelationship relationship describes the likelihood
or probability that a vulnerability will be exploited in the wild using
the Exploit Prediction Scoring System (EPSS) as defined on
<https://www.first.org/epss/model>.

**Constraints**

-   The relationship type must be set to hasAssessmentFor.

**Syntax**

`json {   "@type": "EpssVulnAssessmentRelationship",   "@id": "urn:spdx.dev:epss-1",   "relationshipType": "hasAssessmentFor",   "probability": 80,   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],   "publishedTime": "2021-03-09T11:04:53Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnAssessmentRelationship
    name : EpssVulnAssessmentRelationship
.. properties ..
    <b>probability </b>: xsd:nonNegativeInteger [1..1]
    <b>severity </b>: xsd:string [0..1]
}
class ExploitCatalogVulnAssessmentRelationship {
<b>Summary</b>
Provides an exploit assessment of a vulnerability.
<b>Description</b>
An ExploitCatalogVulnAssessmentRelationship describes if a vulnerability
is listed in any exploit catalog such as the CISA Known Exploited
Vulnerabilities Catalog (KEV)
<https://www.cisa.gov/known-exploited-vulnerabilities-catalog>.

**Constraints**

-   The relationship type must be set to hasAssessmentFor.

**Syntax**

`json {   "@type": "ExploitCatalogVulnAssessmentRelationship",   "@id": "urn:spdx.dev:exploit-catalog-1",   "relationshipType": "hasAssessmentFor",   "catalogType": "kev",   "locator": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",   "exploited": "true",   "from": "urn:spdx.dev:vuln-cve-2023-2136",   "to": ["urn:product-google-chrome-112.0.5615.136"],   "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],   "publishedTime": "2021-03-09T11:04:53Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnAssessmentRelationship
    name : ExploitCatalogVulnAssessmentRelationship
.. properties ..
    <b>catalogType </b>: ExploitCatalogType [1..1]
    <b>exploited </b>: xsd:boolean [1..1]
    <b>locator </b>: xsd:anyURI [1..1]
}
"ExploitCatalogType" <-[dashed,thickness=4]-- "ExploitCatalogVulnAssessmentRelationship::catalogType"
class SsvcVulnAssessmentRelationship {
<b>Summary</b>
Provides an SSVC assessment for a vulnerability.
<b>Description</b>
An SsvcVulnAssessmentRelationship describes the decision made using the
Stakeholder-Specific Vulnerability Categorization (SSVC) decision tree
as defined on
<https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc>.
It is intended to communicate the results of using the CISA SSVC
Calculator.

**Constraints**

-   The relationship type must be set to hasAssessmentFor.

**Syntax**

`json {   "@type": "SsvcVulnAssessmentRelationship",   "@id": "urn:spdx.dev:ssvc-1",   "relationshipType": "hasAssessmentFor",   "decisionType": "act",   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "assessedElement": "urn:npm-elliptic-6.5.2",   "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],   "publishedTime": "2021-03-09T11:04:53Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnAssessmentRelationship
    name : SsvcVulnAssessmentRelationship
.. properties ..
    <b>decisionType </b>: SsvcDecisionType [1..1]
}
"SsvcDecisionType" <-[dashed,thickness=4]-- "SsvcVulnAssessmentRelationship::decisionType"
class VexAffectedVulnAssessmentRelationship {
<b>Summary</b>
Connects a vulnerability and an element designating the element as a
product affected by the vulnerability.
<b>Description</b>
VexAffectedVulnAssessmentRelationship connects a vulnerability and a
number of elements. The relationship marks these elements as products
affected by the vulnerability. This relationship corresponds to the VEX
affected status.

**Constraints**

When linking elements using a VexAffectedVulnAssessmentRelationship, the
following requirements must be observed:

-   Elements linked with a VulnVexAffectedAssessmentRelationship are
    constrained to the affects relationship type.

**Syntax**

`json {   "@type": "VexAffectedVulnAssessmentRelationship",   "@id": "urn:spdx.dev:vex-affected-1",   "relationshipType": "affects",   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "assessedElement": "urn:npm-elliptic-6.5.2",   "actionStatement": "Upgrade to version 1.4 of ACME application.",   "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],   "publishedTime": "2021-03-09T11:04:53Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VexVulnAssessmentRelationship
    name : VexAffectedVulnAssessmentRelationship
.. properties ..
    <b>actionStatement </b>: xsd:string [0..1]
    <b>actionStatementTime </b>: /Core/DateTime [0..]
}
"/Core/DateTime" <-[dashed,thickness=4]-- "VexAffectedVulnAssessmentRelationship::actionStatementTime"
class VexFixedVulnAssessmentRelationship {
<b>Summary</b>
Links a vulnerability and elements representing products (in the VEX
sense) where a fix has been applied and are no longer affected.
<b>Description</b>
VexFixedVulnAssessmentRelationship links a vulnerability to a number of
elements representing VEX products where a vulnerability has been fixed
and are no longer affected. It represents the VEX fixed status.

**Constraints**

When linking elements using a VexFixedVulnAssessmentRelationship, the
following requirements must be observed:

-   Elements linked with a VulnVexFixedAssessmentRelationship are
    constrained to using the fixedIn relationship type.
-   The from: end of the relationship must ve a /Security/Vulnerability
    classed element.

**Syntax**

`json {   "@type": "VexFixedVulnAssessmentRelationship",   "@id": "urn:spdx.dev:vex-fixed-in-1",   "relationshipType": "fixedIn",   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "assessedElement": "urn:npm-elliptic-6.5.4",   "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],   "publishedTime": "2021-03-09T11:04:53Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VexVulnAssessmentRelationship
    name : VexFixedVulnAssessmentRelationship
.. properties ..
}
class VexNotAffectedVulnAssessmentRelationship {
<b>Summary</b>
Links a vulnerability and one or more elements designating the latter as
products not affected by the vulnerability.
<b>Description</b>
VexNotAffectedVulnAssessmentRelationship connects a vulnerability and a
number of elements designating them as products not affected by the
vulnerability. This relationship corresponds to the VEX not\_affected
status.

**Constraints**

When linking elements using a VexNotVulnAffectedAssessmentRelationship,
the following requirements must be observed:

-   Relating elements with a VexNotAffectedVulnAssessmentRelationship is
    restricted to the doesNotAffect relationship type.
-   The from: end of the relationship must be a /Security/Vulnerability
    classed element.
-   Both impactStatement and justificationType properties have a
    cardinality of 0..1 making them optional. Nevertheless, to produce a
    valid VEX not\_affected statement, one of them MUST be defined. This
    is specified in the Minimum Elements for VEX.

**Syntax**

`json {   "@type": "VexNotAffectedVulnAssessmentRelationship",   "@id": "urn:spdx.dev:vex-not-affected-1",   "relationshipType": "doesNotAffect",   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "assessedElement": "urn:npm-elliptic-6.5.2",   "justificationType": "componentNotPresent",   "impactStatement": "Not using this vulnerable part of this library.",   "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],   "publishedTime": "2021-03-09T11:04:53Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VexVulnAssessmentRelationship
    name : VexNotAffectedVulnAssessmentRelationship
.. properties ..
    <b>impactStatement </b>: xsd:string [0..1]
    <b>impactStatementTime </b>: /Core/DateTime [0..1]
    <b>justificationType </b>: VexJustificationType [0..1]
}
"/Core/DateTime" <-[dashed,thickness=4]-- "VexNotAffectedVulnAssessmentRelationship::impactStatementTime"
"VexJustificationType" <-[dashed,thickness=4]-- "VexNotAffectedVulnAssessmentRelationship::justificationType"
class VexUnderInvestigationVulnAssessmentRelationship {
<b>Summary</b>
Designates elements as products where the impact of a vulnerability is
being investigated.
<b>Description</b>
VexUnderInvestigationVulnAssessmentRelationship links a vulnerability to
a number of products stating the vulnerability's impact on them is being
investigated. It represents the VEX under\_investigation status.

**Constraints**

When linking elements using a
VexUnderInvestigationVulnAssessmentRelationship the following
requirements must be observed:

-   Elements linked with a
    VexUnderInvestigationVulnAssessmentRelationship are constrained to
    using the underInvestigationFor relationship type.
-   The from: end of the relationship must ve a /Security/Vulnerability
    classed element.

**Syntax**

`json {   "@type": "VexUnderInvestigationVulnAssessmentRelationship",   "@id": "urn:spdx.dev:vex-underInvestigation-1",   "relationshipType": "underInvestigationFor",   "from": "urn:spdx.dev:vuln-cve-2020-28498",   "to": ["urn:product-acme-application-1.3"],   "assessedElement": "urn:npm-elliptic-6.5.2",   "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],   "publishedTime": "2021-03-09T11:04:53Z" }`
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VexVulnAssessmentRelationship
    name : VexUnderInvestigationVulnAssessmentRelationship
.. properties ..
}
abstract VexVulnAssessmentRelationship {
<b>Summary</b>
Asbtract ancestor class for all VEX relationships
<b>Description</b>
VexVulnAssessmentRelationship is an abstract subclass that defined the
common properties shared by all the SPDX-VEX status relationships.

**Constraints**

When linking elements using a VexVulnAssessmentRelationship, the
following requirements must be observed:

-   The from: end must be a /Security/Vulnerability classed element
-   The to: end must point to elements representing the VEX *products*.
    To specify a different element where the vulnerability was detected,
    the VEX relationship can optionally specify *subcomponents* using
    the assessedElement property.

VEX inherits information from the document level down to its statements.
When a statement is missing information it can be completed by reading
the equivalent field from the containing document. For example, if a VEX
relationship is missing data in its createdBy property, tools must
consider the entity listed in the CreationInfo section of the document
as the VEX author. In the same way, when a VEX relationship does not
have a created property, the document's date must be considered as
authoritative.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : VulnAssessmentRelationship
    name : VexVulnAssessmentRelationship
.. properties ..
    <b>statusNotes </b>: xsd:string [0..1]
    <b>vexVersion </b>: xsd:string [0..1]
}
abstract VulnAssessmentRelationship {
<b>Summary</b>
Abstract ancestor class for all vulnerability assessments
<b>Description</b>
VulnAssessmentRelationship is the ancestor class common to all
vulnerability assessment relationships. It factors out the common
properties shared by them.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : /Core/Relationship
    name : VulnAssessmentRelationship
.. properties ..
    <b>assessedElement </b>: /Core/Element [0..1]
    <b>modifiedTime </b>: /Core/DateTime [0..1]
    <b>publishedTime </b>: /Core/DateTime [0..1]
    <b>suppliedBy </b>: /Core/Agent [0..1]
    <b>withdrawnTime </b>: /Core/DateTime [0..1]
}
"/Core/Element" <-[dashed,thickness=4]-- "VulnAssessmentRelationship::assessedElement"
"/Core/DateTime" <-[dashed,thickness=4]-- "VulnAssessmentRelationship::modifiedTime"
"/Core/DateTime" <-[dashed,thickness=4]-- "VulnAssessmentRelationship::publishedTime"
"/Core/Agent" <-[dashed,thickness=4]-- "VulnAssessmentRelationship::suppliedBy"
"/Core/DateTime" <-[dashed,thickness=4]-- "VulnAssessmentRelationship::withdrawnTime"
class Vulnerability {
<b>Summary</b>
Specifies a vulnerability and its associated information.
<b>Description</b>
Specifies a vulnerability and its associated information.

**Syntax**

`` json {   "@type": "Vulnerability",   "@id": "urn:spdx.dev:vuln-1",   "summary": "Use of a Broken or Risky Cryptographic Algorithm",   "description": "The npm package `elliptic` before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. There is no check to confirm that the public key point passed into the derive function actually exists on the secp256k1 curve. This results in the potential for the private key used in this implementation to be revealed after a number of ECDH operations are performed.",         "modified": "2021-03-08T16:02:43Z",   "published": "2021-03-08T16:06:50Z",   "externalIdentifiers": [     {       "@type": "ExternalIdentifier",       "externalIdentifierType": "cve",       "identifier": "CVE-2020-2849",       "identifierLocator": [         "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28498",         "https://www.cve.org/CVERecord?id=CVE-2020-28498"       ],       "issuingAuthority": "urn:spdx.dev:agent-cve.org"     },     {       "type": "ExternalIdentifier",       "externalIdentifierType": "securityOther",       "identifier": "GHSA-r9p9-mrjm-926w",       "identifierLocator": "https://github.com/advisories/GHSA-r9p9-mrjm-926w"     },     {       "type": "ExternalIdentifier",       "externalIdentifierType": "securityOther",       "identifier": "SNYK-JS-ELLIPTIC-1064899",       "identifierLocator": "https://security.snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899"     }   ],   "externalReferences": [     {         "@type": "ExternalReference",         "externalReferenceType": "securityAdvisory",         "locator": "https://nvd.nist.gov/vuln/detail/CVE-2020-28498"     },     {       "@type": "ExternalReference",       "externalReferenceType": "securityAdvisory",       "locator": "https://ubuntu.com/security/CVE-2020-28498"     },     {       "@type": "ExternalReference",       "externalReferenceType": "securityOther",       "locator": "https://github.com/indutny/elliptic/pull/244/commits"     },     {       "@type": "ExternalReference",       "externalReferenceType": "securityOther",       "locator": "https://github.com/christianlundkvist/blog/blob/master/2020_05_26_secp256k1_twist_attacks/secp256k1_twist_attacks.md"     }   ] }, {   "@type": "Relationship",   "@id": "urn:spdx.dev:vulnRelationship-1",   "relationshipType": "hasAssociatedVulnerability",   "from": "urn:npm-elliptic-6.5.2",   "to": ["urn:spdx.dev:vuln-1"],   "startTime": "2021-03-08T16:06:50Z" }, {   "@type": "Relationship",   "@id": "urn:spdx.dev:vulnAgentRel-1",     "relationshipType": "publishedBy",     "from": "urn:spdx.dev:vuln-1",   "to": ["urn:spdx.dev:agent-snyk"],   "startTime": "2021-03-08T16:06:50Z" } ``
.. metadata ..
    Instantiability : Concrete
    SubclassOf : /Core/Element
    name : Vulnerability
.. properties ..
    <b>modifiedTime </b>: /Core/DateTime [0..1]
    <b>publishedTime </b>: /Core/DateTime [0..1]
    <b>withdrawnTime </b>: /Core/DateTime [0..1]
}
"/Core/DateTime" <-[dashed,thickness=4]-- "Vulnerability::modifiedTime"
"/Core/DateTime" <-[dashed,thickness=4]-- "Vulnerability::publishedTime"
"/Core/DateTime" <-[dashed,thickness=4]-- "Vulnerability::withdrawnTime"
}
}
together {
' vocabulary
enum DependencyConditionalityType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>optional</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>prerequisite</b>: TODOdescription
    <b>provided</b>: TODOdescription
    <b>required</b>: TODOdescription
}
enum SBOMType {
<b>Summary</b>
Provides a set of values to be used to describe the common types of
SBOMs that tools may create.
<b>Description</b>
The set of SBOM types with definitions as defined in [Types of Software
Bill of Material (SBOM)
Documents](https://www.cisa.gov/sites/default/files/2023-04/sbom-types-document-508c.pdf),
published on April 21, 2023. An SBOM type describes the most likely type
of an SBOM from the producer perspective, so that consumers can draw
conclusions about the data inside an SBOM. A single SBOM can have
multiple SBOM document types associated with it.
.. entries ..
    <b>analyzed</b>: SBOM generated through analysis of artifacts (e.g., executables,
packages, containers, and virtual machine images) after its build. Such
analysis generally requires a variety of heuristics. In some contexts,
this may also be referred to as a “3rd party” SBOM.
    <b>build</b>: SBOM generated as part of the process of building the software to create
a releasable artifact (e.g., executable or package) from data such as
source files, dependencies, built components, build process ephemeral
data, and other SBOMs.
    <b>deployed</b>: SBOM provides an inventory of software that is present on a system. This
may be an assembly of other SBOMs that combines analysis of
configuration options, and examination of execution behavior in a
(potentially simulated) deployment environment.
    <b>design</b>: SBOM of intended, planned software project or product with included
components (some of which may not yet exist) for a new software
artifact.
    <b>runtime</b>: SBOM generated through instrumenting the system running the software, to
capture only components present in the system, as well as external
call-outs or dynamically loaded components. In some contexts, this may
also be referred to as an “Instrumented” or “Dynamic” SBOM.
    <b>source</b>: SBOM created directly from the development environment, source files,
and included dependencies used to build an product artifact.
}
enum SoftwareDependencyLinkType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>dynamic</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>static</b>: TODOdescription
    <b>tool</b>: TODOdescription
}
enum SoftwarePurpose {
<b>Summary</b>
Provides information about the primary purpose of an Element.
<b>Description</b>
This field provides information about the primary purpose of an Element.
Software Purpose is intrinsic to how the Element is being used rather
than the content of the Element. This field is a reasonable estimate of
the most likely usage of the Element from the producer and consumer
perspective from which both parties can draw conclusions about the
context in which the Element exists.
.. entries ..
    <b>application</b>: the Element is a software application
    <b>archive</b>: the Element is an archived collection of one or more files (.tar, .zip,
etc)
    <b>bom</b>: Element is a bill of materials
    <b>configuration</b>: Element is configuration data
    <b>container</b>: the Element is a container image which can be used by a container
runtime application
    <b>data</b>: Element is data
    <b>device</b>: the Element refers to a chipset, processor, or electronic board
    <b>documentation</b>: Element is documentation
    <b>evidence</b>: the Element is the evidence that a specification or requirement has been
fulfilled
    <b>executable</b>: Element is an Artifact that can be run on a computer
    <b>file</b>: the Element is a single file which can be independently distributed
(configuration file, statically linked binary, Kubernetes deployment,
etc)
    <b>firmware</b>: the Element provides low level control over a device's hardware
    <b>framework</b>: the Element is a software framework
    <b>install</b>: the Element is used to install software on disk
    <b>library</b>: the Element is a software library
    <b>manifest</b>: the Element is a software manifest
    <b>mlModel</b>: the Element is a machine learning model
    <b>module</b>: the Element is a module of a piece of software
    <b>operatingSystem</b>: the Element is an operating system
    <b>other</b>: the Element doesn't fit into any of the other categories
    <b>patch</b>: Element contains a set of changes to update, fix, or improve another
Element
    <b>requirement</b>: the Element provides a requirement needed as input for another Element
    <b>source</b>: the Element is a single or a collection of source files
    <b>specification</b>: the Element is a plan, guideline or strategy how to create, perform or
analyse an application
}
' classes
together {
class File {
<b>Summary</b>
Refers to any object that stores content on a computer.
<b>Description</b>
Refers to any object that stores content on a computer. The type of
content can optionally be provided in the contentType property.
.. metadata ..
    SubclassOf : /Software/SoftwareArtifact
    name : File
.. properties ..
    <b>contentType </b>: /Core/MediaType [0..1]
}
"/Core/MediaType" <-[dashed,thickness=4]-- "File::contentType"
class Package {
<b>Summary</b>
Refers to any unit of content that can be associated with a distribution
of software.
<b>Description</b>
A package refers to any unit of content that can be associated with a
distribution of software. Typically, a package is composed of one or
more files.  
Any of the following non-limiting examples may be (but are not required
to be) represented in SPDX as a package:

-   a tarball, zip file or other archive
-   a directory or sub-directory
-   a separately distributed piece of software which another Package or
    File uses or depends upon (e.g., a Python package, a Go module, ...)
-   a container image, and/or each image layer within a container image
-   a collection of one or more sub-packages
-   a Git repository snapshot from a particular point in time

Note that some of these could be represented in SPDX as a file as well.
.. metadata ..
    SubclassOf : /Software/SoftwareArtifact
    name : Package
.. properties ..
    <b>downloadLocation </b>: xsd:anyURI [0..1]
    <b>homePage </b>: xsd:anyURI [0..1]
    <b>packageUrl </b>: xsd:anyURI [0..1]
    <b>packageVersion </b>: xsd:string [0..1]
    <b>sourceInfo </b>: xsd:string [0..1]
}
class Sbom {
<b>Summary</b>
A collection of SPDX Elements describing a single package.
<b>Description</b>
A Software Bill of Materials (SBOM) is a collection of SPDX Elements
describing a single package. This could include details of the content
and composition of the product, provenance details of the product and/or
its composition, licensing information, known quality or security
issues, etc.
.. metadata ..
    SubclassOf : /Core/Bom
    name : Sbom
.. properties ..
    <b>sbomType </b>: SBOMType [0..]
}
"SBOMType" <-[dashed,thickness=4]-- "Sbom::sbomType"
class Snippet {
<b>Summary</b>
Describes a certain part of a file.
<b>Description</b>
A Snippet describes a certain part of a file and can be used when the
file is known to have some content that has been included from another
original source. Snippets are useful for denoting when part of a file
may have been originally created under another license or copied from a
place with a known vulnerability.
.. metadata ..
    SubclassOf : /Software/SoftwareArtifact
    name : Snippet
.. properties ..
    <b>byteRange </b>: /Core/PositiveIntegerRange [0..1]
    <b>lineRange </b>: /Core/PositiveIntegerRange [0..1]
}
"/Core/PositiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::byteRange"
"/Core/PositiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::lineRange"
abstract SoftwareArtifact {
<b>Summary</b>
A distinct article or unit related to Software.
<b>Description</b>
A software artifact is a distinct article or unit related to software
such as a package, a file, or a snippet.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : /Core/Artifact
    name : SoftwareArtifact
.. properties ..
    <b>additionalPurpose </b>: SoftwarePurpose [0..]
    <b>attributionText </b>: xsd:string [0..1]
    <b>concludedLicense </b>: /Licensing/LicenseField [0..1]
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>copyrightText </b>: xsd:string [0..1]
    <b>declaredLicense </b>: /Licensing/LicenseField [0..1]
    <b>primaryPurpose </b>: SoftwarePurpose [0..1]
}
"SoftwarePurpose" <-[dashed,thickness=4]-- "SoftwareArtifact::additionalPurpose"
"/Licensing/LicenseField" <-[dashed,thickness=4]-- "SoftwareArtifact::concludedLicense"
"/Licensing/LicenseField" <-[dashed,thickness=4]-- "SoftwareArtifact::declaredLicense"
"SoftwarePurpose" <-[dashed,thickness=4]-- "SoftwareArtifact::primaryPurpose"
class SoftwareDependencyRelationship {
<b>Summary</b>
MISSING
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : /Core/LifecycleScopedRelationship
    name : SoftwareDependencyRelationship
.. properties ..
    <b>conditionality </b>: DependencyConditionalityType [0..1]
    <b>softwareLinkage </b>: SoftwareDependencyLinkType [0..1]
}
"DependencyConditionalityType" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::conditionality"
"SoftwareDependencyLinkType" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::softwareLinkage"
}
}
"/Software/Package" <|-[thickness=4]- "AIPackage"
"/Core/Element" <|-[thickness=4]- "Build"
"Element" <|-[thickness=4]- "Agent"
"Element" <|-[thickness=4]- "Annotation"
"Payload" <|-[thickness=4]- "AnonymousPayload"
"Element" <|-[thickness=4]- "Artifact"
"Bundle" <|-[thickness=4]- "Bom"
"ElementCollection" <|-[thickness=4]- "Bundle"
"Payload" <|-[thickness=4]- "Element"
"Element" <|-[thickness=4]- "ElementCollection"
"IntegrityMethod" <|-[thickness=4]- "Hash"
"Relationship" <|-[thickness=4]- "LifecycleScopedRelationship"
"Agent" <|-[thickness=4]- "Organization"
"Agent" <|-[thickness=4]- "Person"
"Element" <|-[thickness=4]- "Relationship"
"Agent" <|-[thickness=4]- "SoftwareAgent"
"Bundle" <|-[thickness=4]- "SpdxDocument"
"Element" <|-[thickness=4]- "Tool"
"/Software/Package" <|-[thickness=4]- "Dataset"
"LicenseField" <|-[thickness=4]- "AnyLicenseInfo"
"AnyLicenseInfo" <|-[thickness=4]- "ConjunctiveLicenseSet"
"License" <|-[thickness=4]- "CustomLicense"
"LicenseAddition" <|-[thickness=4]- "CustomLicenseAddition"
"AnyLicenseInfo" <|-[thickness=4]- "DisjunctiveLicenseSet"
"AnyLicenseInfo" <|-[thickness=4]- "License"
"License" <|-[thickness=4]- "ListedLicense"
"LicenseAddition" <|-[thickness=4]- "ListedLicenseException"
"LicenseField" <|-[thickness=4]- "NoAssertionLicense"
"LicenseField" <|-[thickness=4]- "NoneLicense"
"AnyLicenseInfo" <|-[thickness=4]- "OrLaterOperator"
"AnyLicenseInfo" <|-[thickness=4]- "WithAdditionOperator"
"VulnAssessmentRelationship" <|-[thickness=4]- "CvssV2VulnAssessmentRelationship"
"VulnAssessmentRelationship" <|-[thickness=4]- "CvssV3VulnAssessmentRelationship"
"VulnAssessmentRelationship" <|-[thickness=4]- "EpssVulnAssessmentRelationship"
"VulnAssessmentRelationship" <|-[thickness=4]- "ExploitCatalogVulnAssessmentRelationship"
"VulnAssessmentRelationship" <|-[thickness=4]- "SsvcVulnAssessmentRelationship"
"VexVulnAssessmentRelationship" <|-[thickness=4]- "VexAffectedVulnAssessmentRelationship"
"VexVulnAssessmentRelationship" <|-[thickness=4]- "VexFixedVulnAssessmentRelationship"
"VexVulnAssessmentRelationship" <|-[thickness=4]- "VexNotAffectedVulnAssessmentRelationship"
"VexVulnAssessmentRelationship" <|-[thickness=4]- "VexUnderInvestigationVulnAssessmentRelationship"
"VulnAssessmentRelationship" <|-[thickness=4]- "VexVulnAssessmentRelationship"
"/Core/Relationship" <|-[thickness=4]- "VulnAssessmentRelationship"
"/Core/Element" <|-[thickness=4]- "Vulnerability"
"/Software/SoftwareArtifact" <|-[thickness=4]- "File"
"/Software/SoftwareArtifact" <|-[thickness=4]- "Package"
"/Core/Bom" <|-[thickness=4]- "Sbom"
"/Software/SoftwareArtifact" <|-[thickness=4]- "Snippet"
"/Core/Artifact" <|-[thickness=4]- "SoftwareArtifact"
"/Core/LifecycleScopedRelationship" <|-[thickness=4]- "SoftwareDependencyRelationship"
@enduml
