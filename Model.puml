@startuml
skinparam packageStyle rectangle
set separator none
together {
' vocabulary
enum SensitivePersonalInformationType {
<b>Summary</b>
Categories of presence or absence
<b>Description</b>
This type is used to indicate if a given field is present or absent or
unknown
.. entries ..
    <b>no</b>: Indicates absence of the field
    <b>noassertion</b>: Describes no assertion. In other words, unknown.
    <b>yes</b>: Indicates presence of the field
}
enum SafetyRiskAssessmentType {
<b>Summary</b>
Categories of safety risk impact of application ie. serious, high,
medium, low.
<b>Description</b>
Describes the different safety risk type values that can be used to
describe the safety risk of the AI software
.. entries ..
    <b>high</b>: The second highest level of risk posed by the AI software as given by
[Article 20 of EC Regulation No
765/2008](https://ec.europa.eu/docsroom/documents/17107/attachments/1/translations/en/renditions/pdf).
    <b>low</b>: Low/no risk is contained in the AI software.
    <b>medium</b>: The third highest level of risk as given by [Article 20 of EC Regulation
No
765/2008](https://ec.europa.eu/docsroom/documents/17107/attachments/1/translations/en/renditions/pdf).
    <b>serious</b>: The highest level of risk that is contained for a AI software as given
by [Article 20 of Regulation
765/2008/EC](https://ec.europa.eu/docsroom/documents/17107/attachments/1/translations/en/renditions/pdf).
}
' classes
together {
class AIPackage {
<b>Summary</b>
Provides information about the fields in the AI package profile.
<b>Description</b>
Metadata information that can be added to a package to describe an AI
application or trained AI model.
.. metadata ..
    Instatiability : Concrete
    SubclassOf : Software:Package
    name : AIPackage
.. properties ..
    <b>autonomyType </b>: PresenceType [0..1]
    <b>dataPreprocessingSteps </b>: xsd:string [0..1]
    <b>domain </b>: xsd:string [0..]
    <b>energyConsumption </b>: xsd:string [0..1]
    <b>hyperparameters </b>: xsd:string [0..]
    <b>informationAboutApplication </b>: xsd:string [0..1]
    <b>informationAboutTraining </b>: xsd:string [0..1]
    <b>limitations </b>: xsd:string [0..]
    <b>metrics </b>: xsd:string [0..]
    <b>metricsDecisionThresholds </b>: xsd:string [0..]
    <b>modelExplainabilityMechanisms </b>: xsd:string [0..1]
    <b>safetyRiskAssessment </b>: SafetyRiskAssessmentType [0..1]
    <b>sensitivePersonalInformation </b>: PresenceType [0..1]
    <b>standardsCompliance </b>: xsd:string [0..]
    <b>typeOfModel </b>: xsd:string [0..]
}
"PresenceType" <-[dashed,thickness=4]-- "AIPackage::autonomyType"
"SafetyRiskAssessmentType" <-[dashed,thickness=4]-- "AIPackage::safetyRiskAssessment"
"PresenceType" <-[dashed,thickness=4]-- "AIPackage::sensitivePersonalInformation"
}
}
together {
' vocabulary
enum BuildTypeVocab {
<b>Summary</b>
MISSING
<b>Description</b>
This is about the vocabulary of build types.
.. entries ..
}
' classes
together {
class Build {
<b>Summary</b>
Class that describes a build instance of software/artifacts.
<b>Description</b>
A build is a representation of the process in which a piece of software
or artifact is built. It encapsulates information related to a build
process and provides an element from which relationships can be created
to describe the build's inputs, outputs, and related entities (e.g.
builders, identities, etc.).

Definitions of "BuildType", "ConfigSource", "Parameters" and
"Environment" follow those defined in [SLSA
provenance](https://slsa.dev/provenance/v0.2).

ExternalIdentifier of type "urlScheme" may be used to identify build
logs. Comment should be "LogReference".
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Core:Element
    name : Build
.. properties ..
    <b>buildId </b>: xsd:string [0..1]
    <b>buildType </b>: anyURI [1..1]
    <b>configSourceDigest </b>: Hash [0..]
    <b>configSourceEntrypoint </b>: xsd:string [0..]
    <b>configSourceUri </b>: anyURI [0..]
    <b>endTime </b>: xsd:DateTime 
    <b>environment </b>: xsd:map&lt;string&gt;string [0..]
    <b>parameters </b>: xsd:map&lt;string&gt;string [0..]
    <b>startTime </b>: xsd:DateTime 
}
"Hash" <-[dashed,thickness=4]-- "Build::configSourceDigest"
}
}
together {
' vocabulary
enum AnnotationType {
<b>Summary</b>
Specifies the type of an annotation.
<b>Description</b>
AnnotationType specifies the type of an annotation.
.. entries ..
    <b>other</b>: Used to store extra information about an Element which is not part of a
Review (e.g. extra information provided during the creation of the
Element).
    <b>review</b>: Used when someone reviews the Element.
}
enum ExternalIdentifierType {
<b>Summary</b>
Specifies the type of an external identifier.
<b>Description</b>
ExteralIdentifierType specifies the type of an external identifier.
.. entries ..
    <b>cpe22</b>: https://cpe.mitre.org/files/cpe-specification\_2.2.pdf
    <b>cpe23</b>: https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf
    <b>email</b>: TODOdescription
    <b>gitoid</b>: gitoid stands for Git Object ID. A gitoid of typeblob is a unique hash
of a software artifact. Git relies on a Merkle Tree to index stored
objects. See https://git-scm.com/book/en/v2/Git-Internals-Git-Objects.
GitBOM is an amalgam of the terms "Git" and "SBOM". GitBOM is a
minimalistic schema to describe software dependency graphs using a
Merkle Tree, and is inspired by Git. A gitoid may refer to either the
software artifact or its GitBOM document; this ambiguity exists because
the GitBOM document is itself an artifact, and the gitoid of that
artifact is its valid locator.
    <b>other</b>: Used when the type doesn't match any of the other options.
    <b>pkgUrl</b>: https://github.com/package-url/purl-spec
    <b>swhid</b>: https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html
    <b>swid</b>: https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.html#section-2.3
    <b>urlScheme</b>: TODOdescription
}
enum ExternalReferenceType {
<b>Summary</b>
Specifies the type of an external reference.
<b>Description</b>
ExteralReferenceType specifies the type of an external reference.
.. entries ..
    <b>altDownloadLocation</b>: A reference to an alternative download location.
    <b>altWebPage</b>: A reference to an alternative web page.
    <b>other</b>: Used when the type doesn't match any of the other options.
    <b>securityAdvisory</b>: A reference to the published security advisory (where advisory as
defined per ISO 29147:2018). It may contain an impact statement whether
a package (e.g. a product) is or is not affected by vulnerabilities.
    <b>securityFix</b>: A reference to the source code with a fix for the vulnerability (e.g., a
GitHub commit).
    <b>securityOther</b>: Used when the reference is security related but doesn't match any of the
other types.
}
enum HashAlgorithm {
<b>Summary</b>
A mathematical algorithm that maps data of arbitrary size to a bit
string.
<b>Description</b>
A HashAlgorithm is a mathematical algorithm that maps data of arbitrary
size to a bit string (the hash) and is a one-way function, that is, a
function which is practically infeasible to invert.
.. entries ..
    <b>blake2b256</b>: TODOdescription
    <b>blake2b384</b>: TODOdescription
    <b>blake2b512</b>: TODOdescription
    <b>blake3</b>: TODOdescription
    <b>md2</b>: TODOdescription
    <b>md4</b>: TODOdescription
    <b>md5</b>: TODOdescription
    <b>md6</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>sha1</b>: TODOdescription
    <b>sha224</b>: TODOdescription
    <b>sha256</b>: TODOdescription
    <b>sha384</b>: TODOdescription
    <b>sha3_224</b>: TODOdescription
    <b>sha3_256</b>: TODOdescription
    <b>sha3_384</b>: TODOdescription
    <b>sha3_512</b>: TODOdescription
    <b>sha512</b>: TODOdescription
    <b>spdxPvcSha1</b>: TODOdescription
    <b>spdxPvcSha256</b>: TODOdescription
}
enum RelationshipCompleteness {
<b>Summary</b>
Indicates whether a relationship is complete or known to be incomplete
or if there is made no assertion either way.
<b>Description</b>
RelationshipCompleteness indicates whether a relationship is complete or
known to be incomplete or if there is made no assertion either way.
.. entries ..
    <b>complete</b>: The relationship is known to be exhaustive.
    <b>incomplete</b>: The relationship is known not to be exhaustive.
    <b>unknown</b>: There can be made no assertion about the completeness of the
relationship.
}
enum RelationshipType {
<b>Summary</b>
Information about the relationship between two Elements.
<b>Description</b>
Provides information about the relationship between two Elements. For
example, you can represent a relationship between two different Files,
between a Package and a File, between two Packages, or between one
SPDXDocument and another SPDXDocument.

Build Profile specific RelationshipType descriptions can be found
[here](https://github.com/spdx/spdx-3-build-profile/blob/main/model/relationships.md)
.. entries ..
    <b>amends</b>: TODOdescription
    <b>ancestor</b>: TODOdescription
    <b>buildChildOf</b>: Build instance that was created from another build instance
    <b>buildConfigOf</b>: Build configuration of the build instance
    <b>buildDependency</b>: TODOdescription
    <b>buildHostOf</b>: Element in which the build instance runs on
    <b>buildInputOf</b>: Input to the build instance
    <b>buildInvokedBy</b>: Agent that invoked the build
    <b>buildOnBehalfOf</b>: Person for which buildInvokedBy is acting on behalf of
    <b>buildOutputOf</b>: Output of the build instance
    <b>buildTool</b>: TODOdescription
    <b>buildToolOf</b>: Build tool used in the build instance
    <b>contains</b>: TODOdescription
    <b>copy</b>: TODOdescription
    <b>dataFile</b>: TODOdescription
    <b>dependencyManifest</b>: TODOdescription
    <b>dependsOn</b>: TODOdescription
    <b>descendant</b>: TODOdescription
    <b>describes</b>: TODOdescription
    <b>devDependency</b>: TODOdescription
    <b>devTool</b>: TODOdescription
    <b>distributionArtifact</b>: TODOdescription
    <b>documentation</b>: TODOdescription
    <b>dynamicLink</b>: TODOdescription
    <b>example</b>: TODOdescription
    <b>expandedFromArchive</b>: TODOdescription
    <b>fileAdded</b>: TODOdescription
    <b>fileDeleted</b>: TODOdescription
    <b>fileModified</b>: TODOdescription
    <b>generates</b>: TODOdescription
    <b>metafile</b>: TODOdescription
    <b>optionalComponent</b>: TODOdescription
    <b>optionalDependency</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>packages</b>: TODOdescription
    <b>patch</b>: TODOdescription
    <b>prerequisite</b>: TODOdescription
    <b>providedDependency</b>: TODOdescription
    <b>requirementFor</b>: TODOdescription
    <b>runtimeDependency</b>: TODOdescription
    <b>specificationFor</b>: TODOdescription
    <b>staticLink</b>: TODOdescription
    <b>suppliedBy</b>: TODOdescription
    <b>test</b>: TODOdescription
    <b>testCase</b>: TODOdescription
    <b>testDependency</b>: TODOdescription
    <b>testTool</b>: TODOdescription
    <b>variant</b>: TODOdescription
}
' classes
together {
class Annotation {
<b>Summary</b>
An assertion made in relation to one or more elements.
<b>Description</b>
An Annotation is an assertion made in relation to one or more elements.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Element
    name : Annotation
.. properties ..
    <b>annotationType </b>: AnnotationType [1..1]
    <b>contentType </b>: MediaType 
    <b>statement </b>: xsd:string [0..1]
    <b>subject </b>: Element [1..1]
}
"AnnotationType" <-[dashed,thickness=4]-- "Annotation::annotationType"
"MediaType" <-[dashed,thickness=4]-- "Annotation::contentType"
"Element" <-[dashed,thickness=4]-- "Annotation::subject"
class AnonymousPayload {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Payload
    name : AnonymousPayload
.. properties ..
    <b>creationInfo </b>: CreationInformation [0..1]
    <b>imports </b>: ExternalMap 
    <b>namespaces </b>: NamespaceMap 
}
"CreationInformation" <-[dashed,thickness=4]-- "AnonymousPayload::creationInfo"
"ExternalMap" <-[dashed,thickness=4]-- "AnonymousPayload::imports"
"NamespaceMap" <-[dashed,thickness=4]-- "AnonymousPayload::namespaces"
abstract Artifact {
<b>Summary</b>
A distinct article or unit within the digital domain.
<b>Description</b>
An artifact is a distinct article or unit within the digital domain,
such as an electronic file, a software package, a device or an element
of data.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : Element
    name : Artifact
.. properties ..
    <b>originatedBy </b>: Identity [0..]
}
"Identity" <-[dashed,thickness=4]-- "Artifact::originatedBy"
class Bom {
<b>Summary</b>
A container for a grouping of SPDX-3.0 content characterizing details
(provenence, composition, licensing, etc.) about a product.
<b>Description</b>
A Bill Of Materials (BOM) is a container for a grouping of SPDX-3.0
content characterizing details about a product. This could include
details of the content and composition of the product, provenence
details of the product and/or its composition, licensing information,
known quality or security issues, etc.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Bundle
    name : Bom
.. properties ..
}
class Bundle {
<b>Summary</b>
A collection of Elements that have a shared context.
<b>Description</b>
A bundle is a collection of Elements that have a shared context.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : ElementCollection
    name : Bundle
.. properties ..
    <b>context </b>: xsd:string [..1]
}
class CreationInformation {
<b>Summary</b>
Provides information about the creation of the Element.
<b>Description</b>
The CreationInformation provides information about who created the
Element, and when and how it was created.
.. metadata ..
    Instantiability : Concrete
    name : CreationInformation
.. properties ..
    <b>comment </b>: xsd:string [0..1]
    <b>created </b>: xsd:dateTime 
    <b>createdBy </b>: Entity [1..]
    <b>createdUsing </b>: Tool [0..]
    <b>dataLicense </b>: xsd:string 
    <b>profile </b>: ProfileIdentifier [1..]
    <b>specVersion </b>: SemVer 
}
"Entity" <-[dashed,thickness=4]-- "CreationInformation::createdBy"
"Tool" <-[dashed,thickness=4]-- "CreationInformation::createdUsing"
"ProfileIdentifier" <-[dashed,thickness=4]-- "CreationInformation::profile"
"SemVer" <-[dashed,thickness=4]-- "CreationInformation::specVersion"
abstract Element {
<b>Summary</b>
Base domain class from which all other SPDX-3.0 domain classes derive.
<b>Description</b>
An Element is a representation of a fundamental concept either directly
inherent to the Bill of Materials (BOM) domain or indirectly related to
the BOM domain and necessary for contextually characterizing BOM
concepts and relationships. Within SPDX-3.0 structure this is the base
class acting as a consistent, unifying, and interoperable foundation for
all explicit and inter-relatable content objects.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : Payload
    name : Element
.. properties ..
    <b>comment </b>: xsd:string [..1]
    <b>creationInfo </b>: CreationInformation [1..1]
    <b>description </b>: xsd:string [..1]
    <b>extensions </b>: Extension 
    <b>externalIdentifiers </b>: ExternalIdentifier 
    <b>externalReferences </b>: ExternalReference 
    <b>name </b>: xsd:string [..1]
    <b>spdxId </b>: xsd:anyURI [1..1]
    <b>summary </b>: xsd:string [..1]
    <b>verifiedUsing </b>: IntegrityMethod 
}
"CreationInformation" <-[dashed,thickness=4]-- "Element::creationInfo"
"Extension" <-[dashed,thickness=4]-- "Element::extensions"
"ExternalIdentifier" <-[dashed,thickness=4]-- "Element::externalIdentifiers"
"ExternalReference" <-[dashed,thickness=4]-- "Element::externalReferences"
"IntegrityMethod" <-[dashed,thickness=4]-- "Element::verifiedUsing"
abstract ElementCollection {
<b>Summary</b>
A collection of Elements, not necessarily with unifying context.
<b>Description</b>
An SpdxCollection is a collection of Elements, not necessarily with
unifying context.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : Element
    name : ElementCollection
.. properties ..
    <b>element </b>: Element [1..]
    <b>imports </b>: ExternalMap 
    <b>namespaces </b>: NamespaceMap 
    <b>rootElement </b>: Element [1..]
}
"Element" <-[dashed,thickness=4]-- "ElementCollection::element"
"ExternalMap" <-[dashed,thickness=4]-- "ElementCollection::imports"
"NamespaceMap" <-[dashed,thickness=4]-- "ElementCollection::namespaces"
"Element" <-[dashed,thickness=4]-- "ElementCollection::rootElement"
class Entity {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Element
    name : Entity
.. properties ..
}
class ExternalIdentifier {
<b>Summary</b>
A reference to a resource outside the scope of SPDX-3.0 content that
uniquely identifies an Element.
<b>Description</b>
An ExternalIdentifier is a reference to a resource outside the scope of
SPDX-3.0 content that uniquely identifies an Element.
.. metadata ..
    Instantiability : Concrete
    name : ExternalIdentifier
.. properties ..
    <b>comment </b>: xsd:string [0..1]
    <b>externalIdentifierType </b>: ExternalIdentifierType [1..1]
    <b>identifier </b>: xsd:string [1..1]
}
"ExternalIdentifierType" <-[dashed,thickness=4]-- "ExternalIdentifier::externalIdentifierType"
class ExternalMap {
<b>Summary</b>
A map of Element identifiers that are used within a Document but defined
external to that Document.
<b>Description</b>
An External Map is a map of Element identifiers that are used within a
Document but defined external to that Document. The external map
provides details about the externally-defined Element such as its
provenance, where to retrieve it, and how to verify its integrity.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : none
    name : ExternalMap
.. properties ..
    <b>externalId </b>: xsd:anyURI [1..1]
    <b>locationHint </b>: xsd:anyURI [..1]
    <b>verifiedUsing </b>: IntegrityMethod 
}
"IntegrityMethod" <-[dashed,thickness=4]-- "ExternalMap::verifiedUsing"
class ExternalReference {
<b>Summary</b>
A reference to a resource outside the scope of SPDX-3.0 content.
<b>Description</b>
An External Reference points to a resource outside the scope of the
SPDX-3.0 content that provides additional characteristics of an Element.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : none
    name : ExternalReference
.. properties ..
    <b>comment </b>: xsd:string [..1]
    <b>contentType </b>: MediaType [..1]
    <b>externalReferenceType </b>: ExternalReferenceType [..1]
    <b>locator </b>: xsd:anyURI 
}
"MediaType" <-[dashed,thickness=4]-- "ExternalReference::contentType"
"ExternalReferenceType" <-[dashed,thickness=4]-- "ExternalReference::externalReferenceType"
class Hash {
<b>Summary</b>
A mathematically calculated representation of a grouping of data.
<b>Description</b>
A hash is a grouping of characteristics unique to the result of applying
a mathematical algorithm that maps data of arbitrary size to a bit
string (the hash) and is a one-way function, that is, a function which
is practically infeasible to invert. This is commonly used for integrity
checking of data.
.. metadata ..
    SubclassOf : IntegrityMethod
    name : Hash
.. properties ..
    <b>algorithm </b>: HashAlgorithm [1..1]
    <b>hashValue </b>: xsd:string [1..1]
}
"HashAlgorithm" <-[dashed,thickness=4]-- "Hash::algorithm"
class Identity {
<b>Summary</b>
An individual or organization.
<b>Description</b>
An Identity is a grouping of identifying characteristics unique to an
individual or organization.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Entity
    name : Identity
.. properties ..
}
abstract IntegrityMethod {
<b>Summary</b>
Provides an independently reproducible mechanism that permits
identification of a specific Element.
<b>Description</b>
An IntegrityMethod provides an independently reproducible mechanism that
permits identification of a specific Element that correlates to the data
in this SPDX document. This identifier enables a recipient to determine
if anything in the original Element has been changed and eliminates
confusion over which version or modification of a specific Element is
referenced.
.. metadata ..
    Instantiability : Abstract
    name : IntegrityMethod
.. properties ..
    <b>comment </b>: xsd:string [..1]
}
class MediaType {
<b>Summary</b>
Standardized way of indicating the type of content of an Element. A
String constrained to the RFC 2046 specification.
<b>Description</b>
The MediaType is a String constrained to the RFC 2046 specification. It
provides a standardized way of indicating the type of content of an
Element. A list of all possible media types is available at
https://www.iana.org/assignments/media-types/media-types.xhtml.
.. metadata ..
    SubclassOf : xsd:string
    name : MediaType
.. properties ..
}
class NamespaceMap {
<b>Summary</b>
A mapping between prefixes and namespace URIs.
<b>Description</b>
A namespace map allows the creator of a collection of Elements to use
shorter identifiers ("prefixes") instead of URIs to provide a more
human-readable and smaller serialized representation of the Elements.
.. metadata ..
    Instantiability : Concrete
    name : NamespaceMap
.. properties ..
    <b>namespace </b>: xsd:anyURI [..1]
    <b>prefix </b>: xsd:string [..1]
}
class Organization {
<b>Summary</b>
A group of people who work together in an organized way for a shared
purpose.
<b>Description</b>
An Organization is a group of people who work together in an organized
way for a shared purpose.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Identity
    name : Organization
.. properties ..
}
abstract Payload {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : Payload
.. properties ..
    <b>creationInfo </b>: CreationInformation [0..1]
    <b>imports </b>: ExternalMap 
    <b>namespaces </b>: NamespaceMap 
}
"CreationInformation" <-[dashed,thickness=4]-- "Payload::creationInfo"
"ExternalMap" <-[dashed,thickness=4]-- "Payload::imports"
"NamespaceMap" <-[dashed,thickness=4]-- "Payload::namespaces"
class Person {
<b>Summary</b>
An individual human being.
<b>Description</b>
A Person is an individual human being.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Identity
    name : Person
.. properties ..
}
class ProfileIdentifier {
<b>Summary</b>
Provides the profile that the Element is specified in.
<b>Description</b>
A profile identifier provides the profile that the Element is specified
in.
.. metadata ..
    SubclassOf : xsd:string
    name : ProfileIdentifier
.. properties ..
}
class Relationship {
<b>Summary</b>
Describes a relationship between one or more elements.
<b>Description</b>
A Relationship is a grouping of characteristics unique to an assertion
that one Element is related to one or more other Elements in some way.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Element
    name : Relationship
.. properties ..
    <b>completeness </b>: RelationshipCompleteness [0..1]
    <b>from </b>: Element [1..1]
    <b>relationshipType </b>: RelationshipType [..1]
    <b>to </b>: Element [1..]
}
"RelationshipCompleteness" <-[dashed,thickness=4]-- "Relationship::completeness"
"Element" <-[dashed,thickness=4]-- "Relationship::from"
"RelationshipType" <-[dashed,thickness=4]-- "Relationship::relationshipType"
"Element" <-[dashed,thickness=4]-- "Relationship::to"
class SemVer {
<b>Summary</b>
A String constrained to the SemVer 2.0.0 specification.
<b>Description</b>
The semantic version is a String constrained to the SemVer 2.0.0
specification.
.. metadata ..
    SubclassOf : xsd:string
    name : SemVer
.. properties ..
}
class SpdxDocument {
<b>Summary</b>
Assembles a collection of Elements under a common string, the name of
the document.
<b>Description</b>
An SpdxDocument assembles a collection of Elements under a common
string, the name of the document. Commonly used when representing a unit
of transfer of SPDX Elements.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Bundle
    name : SpdxDocument
.. properties ..
    <b>name </b>: xsd:string [1..1]
}
class Tool {
<b>Summary</b>
An element of hardware and/or software utilized to carry out a
particular function.
<b>Description</b>
A Tool is an element of hardware and/or software utilized to carry out a
particular function.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Entity
    name : Tool
.. properties ..
}
}
}
together {
' vocabulary
' classes
together {
class Dataset {
<b>Summary</b>
Provides information about the fields in the Dataset profile.
<b>Description</b>
Metadata information that can be added to a a dataset that maybe used in
a software or to train/test an AI package
.. metadata ..
    Instatiability : Concrete
    SubclassOf : Software:Package
    name : Dataset
.. properties ..
    <b>anonymizationMethodUsed </b>: xsd:string [0..]
    <b>confidentialityLevelType </b>: ConfidentialityLevelType [0..]
    <b>dataCollectionProcess </b>: xsd:string [0..]
    <b>dataPreprocessingSteps </b>: xsd:string [0..1]
    <b>datasetNoise </b>: xsd:string [0..1]
    <b>datasetSize </b>: xsd:string [0..1]
    <b>datasetUpdateMechanism </b>: xsd:string [0..1]
    <b>intendedUse </b>: xsd:string [0..1]
    <b>knownBiases </b>: xsd:string [0..1]
    <b>sensitivePersonalInformationType </b>: PresenceType [0..]
    <b>sensors </b>: xsd:string [0..]
}
"ConfidentialityLevelType" <-[dashed,thickness=4]-- "Dataset::confidentialityLevelType"
"PresenceType" <-[dashed,thickness=4]-- "Dataset::sensitivePersonalInformationType"
}
}
together {
' vocabulary
' classes
together {
class ConjunctiveLicenseSet {
<b>Summary</b>
Portion of a LicenseExpression representing a set of licensing
information where all elements apply.
<b>Description</b>
A ConjunctiveLicenseSet indicates that *each* of its subsidiary
LicenseExpressions apply. In other words, a ConjunctiveLicenseSet of two
or more licenses represents a licensing situation where *all* of the
specified licenses are to be complied with. It is represented in the
SPDX License Expression Syntax by the `AND` operator.

It is syntactically correct to specify a ConjunctiveLicenseSet where the
subsidiary LicenseExpressions may be "incompatible" according to a
particular interpretation of the corresponding Licenses. The SPDX
License Expression Syntax does not take into account interpretation of
license texts, which is left to the consumer of SPDX data to determine
for themselves.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseExpression
    name : ConjunctiveLicenseSet
.. properties ..
    <b>child </b>: LicenseExpression [2..]
}
"LicenseExpression" <-[dashed,thickness=4]-- "ConjunctiveLicenseSet::child"
class CopyrightText {
<b>Summary</b>
Concrete class representing copyright text that has actually been found.
<b>Description</b>
A CopyrightText is the primary value that is used by a copyrightText
field that indicates copyright text being found, i.e. with a value other
than NONE or NOASSERTION.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : CopyrightTextField
    name : CopyrightText
.. properties ..
    <b>text </b>: xsd:string [1..1]
}
abstract CopyrightTextField {
<b>Summary</b>
Base abstract class used for the copyrightText field that can take a
value of either a text value (via CopyrightText), NOASSERTION, or NONE.
<b>Description</b>
A CopyrightTextField is the primary value that is used by a copyright
text field for a software Package, File or Snippet. It represents either
actual text (represented via a concrete CopyrightText), or the values
NOASSERTION or NONE.

**FIXME** The specific meanings of NOASSERTION or NONE are defined in
the copyrightText property description. (**INCORRECT** - change to
NoAssertionText or NoneText)
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : CopyrightTextField
.. properties ..
}
class CustomLicense {
<b>Summary</b>
A license that is not listed on the SPDX License List.
<b>Description</b>
A CustomLicense represents a License that is not listed on the SPDX
License List at https://spdx.org/licenses, and is therefore defined by
an SPDX data creator.

**TBD** whether to define the meaning and purpose for each of the
properties

**TBD** how to indicate that the License ID must have the prefix
"LicenseRef-"
.. metadata ..
    Instantiability : Concrete
    SubclassOf : License
    name : CustomLicense
.. properties ..
}
class CustomLicenseException {
<b>Summary</b>
**TBD** Not to be completed until the Change Proposal at
https://github.com/spdx/change-proposal/issues/4 is decided upon. Should
be treated as unconfirmed since this class and its name or meaning is
subject to change.
<b>Description</b>
MISSING
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseException
    name : CustomLicenseException
.. properties ..
}
class DisjunctiveLicenseSet {
<b>Summary</b>
Portion of a LicenseExpression representing a set of licensing
information where only any one of the elements applies.
<b>Description</b>
A DisjunctiveLicenseSet indicates that *only one* of its subsidiary
LicenseExpressions is required to apply. In other words, a
DisjunctiveLicenseSet of two or more licenses represents a licensing
situation where *only one* of the specified licenses are to be complied
with. A consumer of SPDX data would typically understand this to permit
the recipient of the licensed content to choose which of the
corresponding license they would prefer to use. It is represented in the
SPDX License Expression Syntax by the `OR` operator.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseExpression
    name : DisjunctiveLicenseSet
.. properties ..
    <b>child </b>: LicenseExpression [2..]
}
"LicenseExpression" <-[dashed,thickness=4]-- "DisjunctiveLicenseSet::child"
abstract License {
<b>Summary</b>
Abstract class for the portion of a LicenseExpression representing a
license.
<b>Description</b>
A License represents a license text, whether listed on the SPDX License
List (ListedLicense) or defined by an SPDX data creator (CustomLicense).

**TBD** whether to define the meaning and purpose for each of the
properties

**TBD** whether licenseID should be a separately defined property,
rather than xsd:string
.. metadata ..
    Instantiability : Abstract
    SubclassOf : LicenseExpression
    name : License
.. properties ..
    <b>comment </b>: xsd:string [0..1]
    <b>example </b>: xsd:string [0..1]
    <b>isDeprecatedLicenseId </b>: xsd:boolean [0..1]
    <b>isFsfLibre </b>: xsd:boolean [0..1]
    <b>isOsiApproved </b>: xsd:boolean [0..1]
    <b>licenseId </b>: xsd:string [1..1]
    <b>licenseText </b>: xsd:string [1..1]
    <b>name </b>: xsd:string [1..1]
    <b>obsoletedBy </b>: xsd:string [0..1]
    <b>seeAlso </b>: xsd:anyURI [0..1]
    <b>standardLicenseHeader </b>: xsd:string [0..1]
}
abstract LicenseException {
<b>Summary</b>
**TBD** Not to be completed until the Change Proposal at
https://github.com/spdx/change-proposal/issues/4 is decided upon. Should
be treated as unconfirmed since this class and its name or meaning is
subject to change.
<b>Description</b>
MISSING
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : LicenseException
.. properties ..
}
abstract LicenseExpression {
<b>Summary</b>
Abstract class representing a license expression consisting of one or
more licenses (optionally including exceptions), which may be combined
according to the SPDX license expression syntax.
<b>Description</b>
A LicenseExpression is used by a licensing field for a software package,
file or snippet when its value is not NOASSERTION or NONE. It can be a
single license (either on the SPDX License List or a custom-defined
license); a single license with an "or later" operator applied; the
foregoing with an exception applied; or a set of licenses combined by
applying "AND" and "OR" operators recursively.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : LicenseField
    name : LicenseExpression
.. properties ..
}
abstract LicenseField {
<b>Summary</b>
Base abstract class used for all fields that can take a value of either
a license expression, NOASSERTION, or NONE.
<b>Description</b>
A LicenseField is the primary value that is used by a licensing field
for a software Package, File or Snippet. It represents either a license
expression, or the values NOASSERTION or NONE. The specific meanings of
NOASSERTION or NONE for the particular licensing field are defined in
the corresponding property description.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : none
    name : LicenseField
.. properties ..
}
class ListedLicense {
<b>Summary</b>
A license that is listed on the SPDX License List.
<b>Description</b>
A ListedLicense represents a License that is listed on the SPDX License
List at https://spdx.org/licenses.

**TBD** whether to define the meaning and purpose for each of the
properties
.. metadata ..
    Instantiability : Concrete
    SubclassOf : License
    name : ListedLicense
.. properties ..
    <b>deprecatedVersion </b>: xsd:string [0..1]
    <b>listVersionAdded </b>: xsd:string [0..1]
}
class ListedLicenseException {
<b>Summary</b>
**TBD** Not to be completed until the Change Proposal at
https://github.com/spdx/change-proposal/issues/4 is decided upon. Should
be treated as unconfirmed since this class and its name or meaning is
subject to change.
<b>Description</b>
MISSING
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseException
    name : ListedLicenseException
.. properties ..
}
class NoAssertionLicense {
<b>Summary</b>
Concrete class representing an absence of an assertion about license
information.
<b>Description</b>
**TBD** whether the meaning of NoAssertionLicense in the context of the
concludedLicense and declaredLicense properties should be here rather
than in those property definitions

A NoAssertionLicense is the primary value that is used by a
concludedLicense or declaredLicense field that indicates that the SPDX
data creator is making no assertion about the license information for
the corresponding software Package, File or Snippet.

The specific meaning of NoAssertionLicense in the context of a
concludedLicense or declaredLicense field is more fully set forth in the
Property definitions for those fields.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseField
    name : NoAssertionLicense
.. properties ..
}
class NoAssertionText {
<b>Summary</b>
Concrete class representing an absence of an assertion about the
presence of copyright text.
<b>Description</b>
**TBD** whether these details should be defined in the copyrightText
property instead of here

A NoAssertionText is the primary value that is used by a copyrightText
field that indicates that the SPDX data creator is making no assertion
about whether any copyright information is present, or what its contents
are if it is present.

If a copyrightText has a NOASSERTION value, this indicates that one of
the following applies: \* the SPDX data creator has made no attempt to
determine this field; or \* the SPDX data creator has intentionally
provided no information (no meaning should be implied from the absence
of an assertion).
.. metadata ..
    Instantiability : Concrete
    SubclassOf : CopyrightTextField
    name : NoAssertionText
.. properties ..
}
class NoneLicense {
<b>Summary</b>
Concrete class representing an assertion that no license information is
present, as applicable.
<b>Description</b>
**TBD** whether the meaning of NoneLicense in the context of the
concludedLicense and declaredLicense properties should be here rather
than in those property definitions

A NoneLicense is the primary value that is used by a concludedLicense or
declaredLicense field that indicates the absence of license information
from the corresponding software Package, File or Snippet.

The specific meaning of NoneLicense in the context of a concludedLicense
or declaredLicense field is more fully set forth in the Property
definitions for those fields.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseField
    name : NoneLicense
.. properties ..
}
class NoneText {
<b>Summary</b>
Concrete class representing an assertion that no copyright text is
present.
<b>Description</b>
**TBD** whether these details should be defined in the copyrightText
property instead of here

A NoneText is the primary value that is used by a copyrightText field
that indicates that the corresponding software Package, File or Snippet
does not contain any copyright information.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : CopyrightTextField
    name : NoneText
.. properties ..
}
class OrLaterOperator {
<b>Summary</b>
Portion of a LicenseExpression representing this version, or any later
version, of the indicated License.
<b>Description</b>
An OrLaterOperator indicates that this portion of the LicenseExpression
represents either (1) the specified version of the corresponding
License, or (2) any later version of that License. It is represented in
the SPDX License Expression Syntax by the `+` operator.

It is context-dependent, and unspecified by SPDX, as to what constitutes
a "later version" of any particular License. Some Licenses may not be
versioned, or may not have clearly-defined ordering for versions. The
consumer of SPDX data will need to determine for themselves what meaning
to attribute to a "later version" operator for a particular License.
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseExpression
    name : OrLaterOperator
.. properties ..
    <b>license </b>: License [1..1]
}
"License" <-[dashed,thickness=4]-- "OrLaterOperator::license"
class WithExceptionOperator {
<b>Summary</b>
**TBD** Not to be completed until the Change Proposal at
https://github.com/spdx/change-proposal/issues/4 is decided upon. Should
be treated as unconfirmed since this class and its name or meaning is
subject to change.
<b>Description</b>
MISSING
.. metadata ..
    Instantiability : Concrete
    SubclassOf : LicenseExpression
    name : WithExceptionOperator
.. properties ..
}
}
}
together {
' vocabulary
enum CvssV2SeverityType {
<b>Summary</b>
TODO
<b>Description</b>
A CvssV2SeverityType is TODO
.. entries ..
    <b>high</b>: TODOdescription
    <b>low</b>: TODOdescription
    <b>medium</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
}
enum CvssV3SeverityType {
<b>Summary</b>
TODO
<b>Description</b>
A CvssV3SeverityType is TODO
.. entries ..
    <b>critical</b>: TODOdescription
    <b>high</b>: TODOdescription
    <b>low</b>: TODOdescription
    <b>medium</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>none</b>: TODOdescription
}
enum ExploitCatalogListedType {
<b>Summary</b>
TODO
<b>Description</b>
A ExploitCatalogListedType is TODO
.. entries ..
    <b>no</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>yes</b>: TODOdescription
}
enum GenericVulnerabilitySeverityType {
<b>Summary</b>
TODO
<b>Description</b>
A GenericVulnerabilitySeverityType is TODO
.. entries ..
    <b>critical</b>: TODOdescription
    <b>high</b>: TODOdescription
    <b>low</b>: TODOdescription
    <b>medium</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
}
enum SsvcDecisionType {
<b>Summary</b>
TODO
<b>Description</b>
A SsvcDecisionType is TODO
.. entries ..
    <b>act</b>: TODOdescription
    <b>attend</b>: TODOdescription
    <b>track</b>: TODOdescription
    <b>track*</b>: TODOdescription - TODO: can entries have asterisks?
}
enum VexJustificationType {
<b>Summary</b>
TODO
<b>Description</b>
A VexJustificationType is TODO
.. entries ..
    <b>componentNotPresent</b>: TODOdescription
    <b>inlineMitigationsAlreadyExist</b>: TODOdescription
    <b>vulnerableCodeCannotBeControlledByAdversary</b>: TODOdescription
    <b>vulnerableCodeNotInExecutePath</b>: TODOdescription
    <b>vulnerableCodeNotPresent</b>: TODOdescription
}
enum VexStatusType {
<b>Summary</b>
TODO
<b>Description</b>
A VexStatusType is TODO
.. entries ..
    <b>affected</b>: TODOdescription
    <b>fixed</b>: TODOdescription
    <b>notAffected</b>: TODOdescription
    <b>underInvestigation</b>: TODOdescription
}
' classes
together {
class CvssV2VulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
A CvssV2VulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : CvssV2VulnerabilityCategorization
.. properties ..
    <b>score </b>: xsd:string [0..1]
    <b>severity - TODO: there are more properties of this name </b>: CvssV2SeverityType [1..1]
    <b>vector </b>: xsd:string [0..1]
}
"CvssV2SeverityType" <-[dashed,thickness=4]-- "CvssV2VulnerabilityCategorization::severity - TODO: there are more properties of this name"
class CvssV3VulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
A CvssV3VulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : CvssV3VulnerabilityCategorization
.. properties ..
    <b>score </b>: xsd:string [0..1]
    <b>severity - TODO: there are more properties of this name </b>: CvssV3SeverityType [1..1]
    <b>vector </b>: xsd:string [0..1]
}
"CvssV3SeverityType" <-[dashed,thickness=4]-- "CvssV3VulnerabilityCategorization::severity - TODO: there are more properties of this name"
class EpssVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
An EpssVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : EpssVulnerabilityCategorization
.. properties ..
    <b>probability </b>: xsd:nonNegativeInteger [1..1]
    <b>severity - TODO: there are more properties of this name </b>: xsd:string [0..1]
}
class ExploitCatalogVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
An ExploitCatalogVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : ExploitCatalogVulnerabilityCategorization
.. properties ..
    <b>listed </b>: ExploitCatalogListedType [1..1]
    <b>locator - TODO: there is already a property of this name in
core:ExternalReference </b>: xsd:anyURI [1..1]
}
"ExploitCatalogListedType" <-[dashed,thickness=4]-- "ExploitCatalogVulnerabilityCategorization::listed"
class ExternalSecurityIdentifier {
<b>Summary</b>
TODO
<b>Description</b>
An ExternalSecurityIdentifier is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : ExternalIdentifier
    name : ExternalSecurityIdentifier
.. properties ..
    <b>source - TODO: there is already a property of that name in
VulnerabilityCategorization </b>: xsd:string 
}
class GenericVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
A GenericVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : GenericVulnerabilityCategorization
.. properties ..
    <b>exploitability </b>: xsd:string [0..1]
    <b>severity - TODO: there are more properties of this name </b>: GenericVulnerabilitySeverityType [0..1]
}
"GenericVulnerabilitySeverityType" <-[dashed,thickness=4]-- "GenericVulnerabilityCategorization::severity - TODO: there are more properties of this name"
class OtherVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
An OtherVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : OtherVulnerabilityCategorization
.. properties ..
    <b>categorizationType </b>: xsd:string [1..1]
    <b>categorizationValue </b>: xsd:string [1..1]
}
class SsvcVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
An SsvcVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : SsvcVulnerabilityCategorization
.. properties ..
    <b>decision </b>: SsvcDecisionType [1..1]
}
"SsvcDecisionType" <-[dashed,thickness=4]-- "SsvcVulnerabilityCategorization::decision"
class VexAffectedVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
An VexAffectedVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VexVulnerabilityCategorization
    name : VexAffectedVulnerabilityCategorization
.. properties ..
    <b>actionStatement </b>: xsd:string [1..1]
}
class VexNotAffectedVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
An VexNotAffectedVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VexVulnerabilityCategorization
    name : VexNotAffectedVulnerabilityCategorization
.. properties ..
    <b>impact </b>: xsd:string [1..1]
    <b>justification </b>: VexJustificationType [1..1]
}
"VexJustificationType" <-[dashed,thickness=4]-- "VexNotAffectedVulnerabilityCategorization::justification"
class VexVulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
An VexVulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : VulnerabilityCategorization
    name : VexVulnerabilityCategorization
.. properties ..
    <b>status </b>: VexStatusType [1..1]
}
"VexStatusType" <-[dashed,thickness=4]-- "VexVulnerabilityCategorization::status"
class Vulnerability {
<b>Summary</b>
TODO
<b>Description</b>
A Vulnerability is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Artifact
    name : Vulnerability
.. properties ..
    <b>categorizations </b>: VulnerabilityCategorization [0..]
    <b>modified </b>: xsd:datetime [0..1]
    <b>published </b>: xsd:datetime [0..1]
    <b>withdrawn </b>: xsd:datetime [0..1]
}
"VulnerabilityCategorization" <-[dashed,thickness=4]-- "Vulnerability::categorizations"
class VulnerabilityCategorization {
<b>Summary</b>
TODO
<b>Description</b>
A VulnerabilityCategorization is TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : none
    name : VulnerabilityCategorization
.. properties ..
    <b>categorizationDate </b>: xsd:datetime [1..1]
    <b>source - TODO: there is already a property of that name in
ExternalSecurityIdentifier </b>: xsd:anyURI [0..1]
}
}
}
together {
' vocabulary
enum DependencyLinkType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>dynamic</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>static</b>: TODOdescription
    <b>tool</b>: TODOdescription
}
enum DependencyRequirement {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>noAssertion</b>: TODOdescription
    <b>optional</b>: TODOdescription
    <b>preRequisite</b>: TODOdescription
    <b>provided</b>: TODOdescription
    <b>required</b>: TODOdescription
}
enum DependencyScope {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>build</b>: TODOdescription
    <b>dev</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>runtime</b>: TODOdescription
    <b>test</b>: TODOdescription
}
enum SoftwarePurpose {
<b>Summary</b>
Provides information about the primary purpose of an Element.
<b>Description</b>
This field provides information about the primary purpose of an Element.
Software Purpose is intrinsic to how the Element is being used rather
than the content of the Element. This field is a reasonable estimate of
the most likely usage of the Element from the producer and consumer
perspective from which both parties can draw conclusions about the
context in which the Element exists.
.. entries ..
    <b>application</b>: the Element is a software application
    <b>archive</b>: the Element refers to an archived collection of files (.tar, .zip, etc)
    <b>bom</b>: TODOdescription
    <b>configuration</b>: TODOdescription
    <b>container</b>: the Element refers to a container image which can be used by a container
runtime application
    <b>data</b>: TODOdescription
    <b>device</b>: the Element refers to a chipset, processor, or electronic board
    <b>documentation</b>: TODOdescription
    <b>executable</b>: TODOdescription
    <b>file</b>: the Element is a single file which can be independently distributed
(configuration file, statically linked binary, Kubernetes deployment,
etc)
    <b>firmware</b>: the Element provides low level control over a device's hardware
    <b>framework</b>: the Element is a software framework
    <b>install</b>: the Element is used to install software on disk
    <b>library</b>: the Element is a software library
    <b>module</b>: TODOdescription
    <b>operatingSystem</b>: the Element refers to an operating system
    <b>other</b>: the Element doesn't fit into any of the other categories
    <b>patch</b>: TODOdescription
    <b>source</b>: the Element is a collection of source files
}
' classes
together {
class File {
<b>Summary</b>
TODO
<b>Description</b>
TODO This is about the File class.
.. metadata ..
    SubclassOf : Core:Artifact
    name : File
.. properties ..
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>contentType </b>: MediaType [0..1]
    <b>filePurpose </b>: SoftwarePurpose [0..]
}
"MediaType" <-[dashed,thickness=4]-- "File::contentType"
"SoftwarePurpose" <-[dashed,thickness=4]-- "File::filePurpose"
class Package {
<b>Summary</b>
Refers to any unit of content that can be associated with a distribution
of software.
<b>Description</b>
A package refers to any unit of content that can be associated with a
distribution of software. Typically, a package is composed of one or
more files.  
Any of the following non-limiting examples may be (but are not required
to be) represented in SPDX as a package:

-   a tarball, zip file or other archive
-   a directory or sub-directory
-   a separately distributed piece of software which another Package or
    File uses or depends upon (e.g., a Python package, a Go module, ...)
-   a container image, and/or each image layer within a container image
-   a collection of one or more sub-packages
-   a Git repository snapshot from a particular point in time

Note that some of these could be represented in SPDX as a file as well.
.. metadata ..
    SubclassOf : Core:Artifact
    name : Package
.. properties ..
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>downloadLocation </b>: xsd:anyURI [0..1]
    <b>homePage </b>: xsd:anyURI [0..1]
    <b>packagePurpose </b>: SoftwarePurpose [0..]
    <b>packageUrl </b>: xsd:anyURI [0..1]
    <b>packageVersion </b>: xsd:string [0..1]
}
"SoftwarePurpose" <-[dashed,thickness=4]-- "Package::packagePurpose"
class Sbom {
<b>Summary</b>
A collection of SPDX Elements describing a single package.
<b>Description</b>
A Software Bill of Materials (SBOM) is a collection of SPDX Elements
describing a single package. This could include details of the content
and composition of the product, provenance details of the product and/or
its composition, licensing information, known quality or security
issues, etc.
.. metadata ..
    SubclassOf : Core:Bom
    name : Sbom
.. properties ..
}
class Snippet {
<b>Summary</b>
Describes a certain part of a file.
<b>Description</b>
A Snippet describes a certain part of a file and can be used when the
file is known to have some content that has been included from another
original source. Snippets are useful for denoting when part of a file
may have been originally created under another license or copied from a
place with a known vulnerability.
.. metadata ..
    SubclassOf : Core:Artifact
    name : Snippet
.. properties ..
    <b>byteRange </b>: positiveIntegerRange [0..1]
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>lineRange </b>: positiveIntegerRange [0..1]
    <b>snippetPurpose </b>: SoftwarePurpose [0..]
}
"positiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::byteRange"
"positiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::lineRange"
"SoftwarePurpose" <-[dashed,thickness=4]-- "Snippet::snippetPurpose"
class SoftwareDependencyRelationship {
<b>Summary</b>
MISSING
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Core:Relationship
    name : SoftwareDependencyRelationship
.. properties ..
    <b>linkType </b>: DependencyLinkType [1..1]
    <b>requirement </b>: DependencyRequirement [1..1]
    <b>scope </b>: DependencyScope [1..1]
}
"DependencyLinkType" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::linkType"
"DependencyRequirement" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::requirement"
"DependencyScope" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::scope"
}
}
"Package" <|-[thickness=4]--- "AIPackage" : Software:Package
"Element" <|-[thickness=4]--- "Build" : Core:Element
"Element" <|-[thickness=4]- "Annotation"
"Payload" <|-[thickness=4]- "AnonymousPayload"
"Element" <|-[thickness=4]- "Artifact"
"Bundle" <|-[thickness=4]- "Bom"
"ElementCollection" <|-[thickness=4]- "Bundle"
"Payload" <|-[thickness=4]- "Element"
"Element" <|-[thickness=4]- "ElementCollection"
"Element" <|-[thickness=4]- "Entity"
"IntegrityMethod" <|-[thickness=4]- "Hash"
"Entity" <|-[thickness=4]- "Identity"
"Identity" <|-[thickness=4]- "Organization"
"Identity" <|-[thickness=4]- "Person"
"Element" <|-[thickness=4]- "Relationship"
"Bundle" <|-[thickness=4]- "SpdxDocument"
"Entity" <|-[thickness=4]- "Tool"
"Package" <|-[thickness=4]--- "Dataset" : Software:Package
"LicenseExpression" <|-[thickness=4]- "ConjunctiveLicenseSet"
"CopyrightTextField" <|-[thickness=4]- "CopyrightText"
"License" <|-[thickness=4]- "CustomLicense"
"LicenseException" <|-[thickness=4]- "CustomLicenseException"
"LicenseExpression" <|-[thickness=4]- "DisjunctiveLicenseSet"
"LicenseExpression" <|-[thickness=4]- "License"
"LicenseField" <|-[thickness=4]- "LicenseExpression"
"License" <|-[thickness=4]- "ListedLicense"
"LicenseException" <|-[thickness=4]- "ListedLicenseException"
"LicenseField" <|-[thickness=4]- "NoAssertionLicense"
"CopyrightTextField" <|-[thickness=4]- "NoAssertionText"
"LicenseField" <|-[thickness=4]- "NoneLicense"
"CopyrightTextField" <|-[thickness=4]- "NoneText"
"LicenseExpression" <|-[thickness=4]- "OrLaterOperator"
"LicenseExpression" <|-[thickness=4]- "WithExceptionOperator"
"VulnerabilityCategorization" <|-[thickness=4]- "CvssV2VulnerabilityCategorization"
"VulnerabilityCategorization" <|-[thickness=4]- "CvssV3VulnerabilityCategorization"
"VulnerabilityCategorization" <|-[thickness=4]- "EpssVulnerabilityCategorization"
"VulnerabilityCategorization" <|-[thickness=4]- "ExploitCatalogVulnerabilityCategorization"
"ExternalIdentifier" <|-[thickness=4]- "ExternalSecurityIdentifier"
"VulnerabilityCategorization" <|-[thickness=4]- "GenericVulnerabilityCategorization"
"VulnerabilityCategorization" <|-[thickness=4]- "OtherVulnerabilityCategorization"
"VulnerabilityCategorization" <|-[thickness=4]- "SsvcVulnerabilityCategorization"
"VexVulnerabilityCategorization" <|-[thickness=4]- "VexAffectedVulnerabilityCategorization"
"VexVulnerabilityCategorization" <|-[thickness=4]- "VexNotAffectedVulnerabilityCategorization"
"VulnerabilityCategorization" <|-[thickness=4]- "VexVulnerabilityCategorization"
"Artifact" <|-[thickness=4]- "Vulnerability"
"Artifact" <|-[thickness=4]--- "File" : Core:Artifact
"Artifact" <|-[thickness=4]--- "Package" : Core:Artifact
"Bom" <|-[thickness=4]--- "Sbom" : Core:Bom
"Artifact" <|-[thickness=4]--- "Snippet" : Core:Artifact
"Relationship" <|-[thickness=4]--- "SoftwareDependencyRelationship" : Core:Relationship
@enduml
