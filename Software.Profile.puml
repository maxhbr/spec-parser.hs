@startuml
skinparam packageStyle rectangle
set separator none
' vocabulary
enum DependencyConditionalityType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>optional</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>prerequisite</b>: TODOdescription
    <b>provided</b>: TODOdescription
    <b>required</b>: TODOdescription
}
enum SBOMType {
<b>Summary</b>
Provides a set of values to be used to describe the common types of
SBOMs that tools may create.
<b>Description</b>
The set of SBOM types with definitions as defined in [Types of Software
Bill of Material (SBOM)
Documents](https://www.cisa.gov/sites/default/files/2023-04/sbom-types-document-508c.pdf),
published on April 21, 2023. An SBOM type describes the most likely type
of an SBOM from the producer perspective, so that consumers can draw
conclusions about the data inside an SBOM. A single SBOM can have
multiple SBOM document types associated with it.
.. entries ..
    <b>analyzed</b>: SBOM generated through analysis of artifacts (e.g., executables,
packages, containers, and virtual machine images) after its build. Such
analysis generally requires a variety of heuristics. In some contexts,
this may also be referred to as a “3rd party” SBOM.
    <b>build</b>: SBOM generated as part of the process of building the software to create
a releasable artifact (e.g., executable or package) from data such as
source files, dependencies, built components, build process ephemeral
data, and other SBOMs.
    <b>deployed</b>: SBOM provides an inventory of software that is present on a system. This
may be an assembly of other SBOMs that combines analysis of
configuration options, and examination of execution behavior in a
(potentially simulated) deployment environment.
    <b>design</b>: SBOM of intended, planned software project or product with included
components (some of which may not yet exist) for a new software
artifact.
    <b>runtime</b>: SBOM generated through instrumenting the system running the software, to
capture only components present in the system, as well as external
call-outs or dynamically loaded components. In some contexts, this may
also be referred to as an “Instrumented” or “Dynamic” SBOM.
    <b>source</b>: SBOM created directly from the development environment, source files,
and included dependencies used to build an product artifact.
}
enum SoftwareDependencyLinkType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>dynamic</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>static</b>: TODOdescription
    <b>tool</b>: TODOdescription
}
enum SoftwarePurpose {
<b>Summary</b>
Provides information about the primary purpose of an Element.
<b>Description</b>
This field provides information about the primary purpose of an Element.
Software Purpose is intrinsic to how the Element is being used rather
than the content of the Element. This field is a reasonable estimate of
the most likely usage of the Element from the producer and consumer
perspective from which both parties can draw conclusions about the
context in which the Element exists.
.. entries ..
    <b>application</b>: the Element is a software application
    <b>archive</b>: the Element is an archived collection of one or more files (.tar, .zip,
etc)
    <b>bom</b>: Element is a bill of materials
    <b>configuration</b>: Element is configuration data
    <b>container</b>: the Element is a container image which can be used by a container
runtime application
    <b>data</b>: Element is data
    <b>device</b>: the Element refers to a chipset, processor, or electronic board
    <b>documentation</b>: Element is documentation
    <b>evidence</b>: the Element is the evidence that a specification or requirement has been
fulfilled
    <b>executable</b>: Element is an Artifact that can be run on a computer
    <b>file</b>: the Element is a single file which can be independently distributed
(configuration file, statically linked binary, Kubernetes deployment,
etc)
    <b>firmware</b>: the Element provides low level control over a device's hardware
    <b>framework</b>: the Element is a software framework
    <b>install</b>: the Element is used to install software on disk
    <b>library</b>: the Element is a software library
    <b>manifest</b>: the Element is a software manifest
    <b>mlModel</b>: the Element is a machine learning model
    <b>module</b>: the Element is a module of a piece of software
    <b>operatingSystem</b>: the Element is an operating system
    <b>other</b>: the Element doesn't fit into any of the other categories
    <b>patch</b>: Element contains a set of changes to update, fix, or improve another
Element
    <b>requirement</b>: the Element provides a requirement needed as input for another Element
    <b>source</b>: the Element is a single or a collection of source files
    <b>specification</b>: the Element is a plan, guideline or strategy how to create, perform or
analyse an application
}
' classes
together {
class File {
<b>Summary</b>
Refers to any object that stores content on a computer.
<b>Description</b>
Refers to any object that stores content on a computer. The type of
content can optionally be provided in the contentType property.
.. metadata ..
    SubclassOf : /Software/SoftwareArtifact
    name : File
.. properties ..
    <b>contentType </b>: /Core/MediaType [0..1]
}
"/Core/MediaType" <-[dashed,thickness=4]-- "File::contentType"
class Package {
<b>Summary</b>
Refers to any unit of content that can be associated with a distribution
of software.
<b>Description</b>
A package refers to any unit of content that can be associated with a
distribution of software. Typically, a package is composed of one or
more files.  
Any of the following non-limiting examples may be (but are not required
to be) represented in SPDX as a package:

-   a tarball, zip file or other archive
-   a directory or sub-directory
-   a separately distributed piece of software which another Package or
    File uses or depends upon (e.g., a Python package, a Go module, ...)
-   a container image, and/or each image layer within a container image
-   a collection of one or more sub-packages
-   a Git repository snapshot from a particular point in time

Note that some of these could be represented in SPDX as a file as well.
.. metadata ..
    SubclassOf : /Software/SoftwareArtifact
    name : Package
.. properties ..
    <b>downloadLocation </b>: xsd:anyURI [0..1]
    <b>homePage </b>: xsd:anyURI [0..1]
    <b>packageUrl </b>: xsd:anyURI [0..1]
    <b>packageVersion </b>: xsd:string [0..1]
    <b>sourceInfo </b>: xsd:string [0..1]
}
class Sbom {
<b>Summary</b>
A collection of SPDX Elements describing a single package.
<b>Description</b>
A Software Bill of Materials (SBOM) is a collection of SPDX Elements
describing a single package. This could include details of the content
and composition of the product, provenance details of the product and/or
its composition, licensing information, known quality or security
issues, etc.
.. metadata ..
    SubclassOf : /Core/Bom
    name : Sbom
.. properties ..
    <b>sbomType </b>: SBOMType [0..]
}
"SBOMType" <-[dashed,thickness=4]-- "Sbom::sbomType"
class Snippet {
<b>Summary</b>
Describes a certain part of a file.
<b>Description</b>
A Snippet describes a certain part of a file and can be used when the
file is known to have some content that has been included from another
original source. Snippets are useful for denoting when part of a file
may have been originally created under another license or copied from a
place with a known vulnerability.
.. metadata ..
    SubclassOf : /Software/SoftwareArtifact
    name : Snippet
.. properties ..
    <b>byteRange </b>: /Core/PositiveIntegerRange [0..1]
    <b>lineRange </b>: /Core/PositiveIntegerRange [0..1]
}
"/Core/PositiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::byteRange"
"/Core/PositiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::lineRange"
abstract SoftwareArtifact {
<b>Summary</b>
A distinct article or unit related to Software.
<b>Description</b>
A software artifact is a distinct article or unit related to software
such as a package, a file, or a snippet.
.. metadata ..
    Instantiability : Abstract
    SubclassOf : /Core/Artifact
    name : SoftwareArtifact
.. properties ..
    <b>additionalPurpose </b>: SoftwarePurpose [0..]
    <b>attributionText </b>: xsd:string [0..1]
    <b>concludedLicense </b>: /Licensing/LicenseField [0..1]
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>copyrightText </b>: xsd:string [0..1]
    <b>declaredLicense </b>: /Licensing/LicenseField [0..1]
    <b>primaryPurpose </b>: SoftwarePurpose [0..1]
}
"SoftwarePurpose" <-[dashed,thickness=4]-- "SoftwareArtifact::additionalPurpose"
"/Licensing/LicenseField" <-[dashed,thickness=4]-- "SoftwareArtifact::concludedLicense"
"/Licensing/LicenseField" <-[dashed,thickness=4]-- "SoftwareArtifact::declaredLicense"
"SoftwarePurpose" <-[dashed,thickness=4]-- "SoftwareArtifact::primaryPurpose"
class SoftwareDependencyRelationship {
<b>Summary</b>
MISSING
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : /Core/LifecycleScopedRelationship
    name : SoftwareDependencyRelationship
.. properties ..
    <b>conditionality </b>: DependencyConditionalityType [0..1]
    <b>softwareLinkage </b>: SoftwareDependencyLinkType [0..1]
}
"DependencyConditionalityType" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::conditionality"
"SoftwareDependencyLinkType" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::softwareLinkage"
}
"/Software/SoftwareArtifact" <|-[thickness=4]- "File"
"/Software/SoftwareArtifact" <|-[thickness=4]- "Package"
"/Core/Bom" <|-[thickness=4]- "Sbom"
"/Software/SoftwareArtifact" <|-[thickness=4]- "Snippet"
"/Core/Artifact" <|-[thickness=4]- "SoftwareArtifact"
"/Core/LifecycleScopedRelationship" <|-[thickness=4]- "SoftwareDependencyRelationship"
@enduml
