@startuml
skinparam packageStyle rectangle
set separator none
' vocabulary
enum DependencyLinkType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>dynamic</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>static</b>: TODOdescription
    <b>tool</b>: TODOdescription
}
enum DependencyRequirement {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>noAssertion</b>: TODOdescription
    <b>optional</b>: TODOdescription
    <b>preRequisite</b>: TODOdescription
    <b>provided</b>: TODOdescription
    <b>required</b>: TODOdescription
}
enum DependencyScope {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>build</b>: TODOdescription
    <b>dev</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>runtime</b>: TODOdescription
    <b>test</b>: TODOdescription
}
enum SoftwarePurpose {
<b>Summary</b>
Provides information about the primary purpose of an Element.
<b>Description</b>
This field provides information about the primary purpose of an Element.
Software Purpose is intrinsic to how the Element is being used rather
than the content of the Element. This field is a reasonable estimate of
the most likely usage of the Element from the producer and consumer
perspective from which both parties can draw conclusions about the
context in which the Element exists.
.. entries ..
    <b>application</b>: the Element is a software application
    <b>archive</b>: the Element refers to an archived collection of files (.tar, .zip, etc)
    <b>bom</b>: TODOdescription
    <b>configuration</b>: TODOdescription
    <b>container</b>: the Element refers to a container image which can be used by a container
runtime application
    <b>data</b>: TODOdescription
    <b>device</b>: the Element refers to a chipset, processor, or electronic board
    <b>documentation</b>: TODOdescription
    <b>executable</b>: TODOdescription
    <b>file</b>: the Element is a single file which can be independently distributed
(configuration file, statically linked binary, Kubernetes deployment,
etc)
    <b>firmware</b>: the Element provides low level control over a device's hardware
    <b>framework</b>: the Element is a software framework
    <b>install</b>: the Element is used to install software on disk
    <b>library</b>: the Element is a software library
    <b>module</b>: TODOdescription
    <b>operatingSystem</b>: the Element refers to an operating system
    <b>other</b>: the Element doesn't fit into any of the other categories
    <b>patch</b>: TODOdescription
    <b>source</b>: the Element is a collection of source files
}
' classes
together {
class File {
<b>Summary</b>
TODO
<b>Description</b>
TODO This is about the File class.
.. metadata ..
    SubclassOf : Core:Artifact
    name : File
.. properties ..
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>contentType </b>: MediaType [0..1]
    <b>filePurpose </b>: SoftwarePurpose [0..]
}
"MediaType" <-[dashed,thickness=4]-- "File::contentType"
"SoftwarePurpose" <-[dashed,thickness=4]-- "File::filePurpose"
class Package {
<b>Summary</b>
Refers to any unit of content that can be associated with a distribution
of software.
<b>Description</b>
A package refers to any unit of content that can be associated with a
distribution of software. Typically, a package is composed of one or
more files.  
Any of the following non-limiting examples may be (but are not required
to be) represented in SPDX as a package:

-   a tarball, zip file or other archive
-   a directory or sub-directory
-   a separately distributed piece of software which another Package or
    File uses or depends upon (e.g., a Python package, a Go module, ...)
-   a container image, and/or each image layer within a container image
-   a collection of one or more sub-packages
-   a Git repository snapshot from a particular point in time

Note that some of these could be represented in SPDX as a file as well.
.. metadata ..
    SubclassOf : Core:Artifact
    name : Package
.. properties ..
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>downloadLocation </b>: xsd:anyURI [0..1]
    <b>homePage </b>: xsd:anyURI [0..1]
    <b>packagePurpose </b>: SoftwarePurpose [0..]
    <b>packageUrl </b>: xsd:anyURI [0..1]
    <b>packageVersion </b>: xsd:string [0..1]
}
"SoftwarePurpose" <-[dashed,thickness=4]-- "Package::packagePurpose"
class Sbom {
<b>Summary</b>
A collection of SPDX Elements describing a single package.
<b>Description</b>
A Software Bill of Materials (SBOM) is a collection of SPDX Elements
describing a single package. This could include details of the content
and composition of the product, provenance details of the product and/or
its composition, licensing information, known quality or security
issues, etc.
.. metadata ..
    SubclassOf : Core:Bom
    name : Sbom
.. properties ..
}
class Snippet {
<b>Summary</b>
Describes a certain part of a file.
<b>Description</b>
A Snippet describes a certain part of a file and can be used when the
file is known to have some content that has been included from another
original source. Snippets are useful for denoting when part of a file
may have been originally created under another license or copied from a
place with a known vulnerability.
.. metadata ..
    SubclassOf : Core:Artifact
    name : Snippet
.. properties ..
    <b>byteRange </b>: positiveIntegerRange [0..1]
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>lineRange </b>: positiveIntegerRange [0..1]
    <b>snippetPurpose </b>: SoftwarePurpose [0..]
}
"positiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::byteRange"
"positiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::lineRange"
"SoftwarePurpose" <-[dashed,thickness=4]-- "Snippet::snippetPurpose"
class SoftwareDependencyRelationship {
<b>Summary</b>
MISSING
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Core:Relationship
    name : SoftwareDependencyRelationship
.. properties ..
    <b>linkType </b>: DependencyLinkType [1..1]
    <b>requirement </b>: DependencyRequirement [1..1]
    <b>scope </b>: DependencyScope [1..1]
}
"DependencyLinkType" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::linkType"
"DependencyRequirement" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::requirement"
"DependencyScope" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::scope"
}
"Artifact" <|-[thickness=4]--- "File" : Core:Artifact
"Artifact" <|-[thickness=4]--- "Package" : Core:Artifact
"Bom" <|-[thickness=4]--- "Sbom" : Core:Bom
"Artifact" <|-[thickness=4]--- "Snippet" : Core:Artifact
"Relationship" <|-[thickness=4]--- "SoftwareDependencyRelationship" : Core:Relationship
@enduml
