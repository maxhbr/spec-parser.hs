@startuml
skinparam packageStyle rectangle
set separator none
' vocabulary
enum DependencyLinkType {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>dynamic</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>static</b>: TODOdescription
    <b>tool</b>: TODOdescription
}
enum DependencyRequirement {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>noAssertion</b>: TODOdescription
    <b>optional</b>: TODOdescription
    <b>preRequisite</b>: TODOdescription
    <b>provided</b>: TODOdescription
    <b>required</b>: TODOdescription
}
enum DependencyScope {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>build</b>: TODOdescription
    <b>dev</b>: TODOdescription
    <b>noAssertion</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>runtime</b>: TODOdescription
    <b>test</b>: TODOdescription
}
enum SoftwarePurpose {
<b>Summary</b>
TODO
<b>Description</b>
TODO
.. entries ..
    <b>application</b>: TODOdescription
    <b>archive</b>: TODOdescription
    <b>bom</b>: TODOdescription
    <b>configuration</b>: TODOdescription
    <b>container</b>: TODOdescription
    <b>data</b>: TODOdescription
    <b>device</b>: TODOdescription
    <b>documentation</b>: TODOdescription
    <b>executable</b>: TODOdescription
    <b>file</b>: TODOdescription
    <b>firmware</b>: TODOdescription
    <b>framework</b>: TODOdescription
    <b>install</b>: TODOdescription
    <b>library</b>: TODOdescription
    <b>module</b>: TODOdescription
    <b>operatingSystem</b>: TODOdescription
    <b>other</b>: TODOdescription
    <b>patch</b>: TODOdescription
    <b>source</b>: TODOdescription
}
' classes
together {
class File {
<b>Summary</b>
MISSING
<b>Description</b>
TODO This is about the File class.
.. metadata ..
    SubclassOf : Core:Artifact
    name : File
.. properties ..
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>contentType </b>: MediaType [0..1]
    <b>filePurpose </b>: SoftwarePurpose [0..]
}
"MediaType" <-[dashed,thickness=4]-- "File::contentType"
"SoftwarePurpose" <-[dashed,thickness=4]-- "File::filePurpose"
class Package {
<b>Summary</b>
MISSING
<b>Description</b>
If SPDX information is being used to describe packages, then one
instance of the package information per package being described shall
exist. It provides important meta information about the package as a
whole. Packages are an abstract concept that can be used to refer to any
distribution of software, typically consisting of one or more files and
capable of containing sub-packages. Starting with SPDX 2.0, it is not
necessary to have a package wrapping a set of files.

A package refers to any unit of content that can be associated with a
distribution of software. Typically, a package is composed of one or
more files. An SPDX document may, but is not required to, provide
details about the individual files comprising a package (see File.md).

Any of the following non-limiting examples may be (but are not required
to be) represented in SPDX as a package:

-   a tarball, zip file or other archive
-   a directory or sub-directory
-   a separately distributed piece of software which another Package or
    File uses or depends upon (e.g., a Python package, a Go module, ...)
-   a container image, and/or each image layer within a container image
-   a collection of one or more sub-packages
-   a Git repository snapshot from a particular point in time

Note that some of these could be represented in SPDX as a file as well.

In an SPDX document, relationship elements can be used to indicate
relationships between packages, such as dependency relationships.

Cardinality: Optional, zero or many.
.. metadata ..
    SubclassOf : Core:Artifact
    name : Package
.. properties ..
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>downloadLocation </b>: xsd:anyURI [0..1]
    <b>homePage </b>: xsd:anyURI [0..1]
    <b>packagePurpose </b>: SoftwarePurpose [0..]
    <b>packageUrl </b>: xsd:anyURI [0..1]
    <b>packageVersion </b>: xsd:string [0..1]
}
"SoftwarePurpose" <-[dashed,thickness=4]-- "Package::packagePurpose"
class Sbom {
<b>Summary</b>
MISSING
<b>Description</b>
A Software Bill of Materials (SBOM) is a container for a grouping of
SPDX-3.0 content characterizing details about a software product. This
could include details of the content and composition of the product,
provenence details of the product and/or its composition, licensing
information, known quality or security issues, etc.
.. metadata ..
    SubclassOf : Core:Bom
    name : Sbom
.. properties ..
}
class Snippet {
<b>Summary</b>
MISSING
<b>Description</b>
TODO
.. metadata ..
    SubclassOf : Core:Artifact
    name : Snippet
.. properties ..
    <b>byteRange </b>: positiveIntegerRange [0..1]
    <b>contentIdentifier </b>: xsd:anyURI [0..1]
    <b>lineRange </b>: positiveIntegerRange [0..1]
    <b>snippetPurpose </b>: SoftwarePurpose [0..]
}
"positiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::byteRange"
"positiveIntegerRange" <-[dashed,thickness=4]-- "Snippet::lineRange"
"SoftwarePurpose" <-[dashed,thickness=4]-- "Snippet::snippetPurpose"
class SoftwareDependencyRelationship {
<b>Summary</b>
MISSING
<b>Description</b>
TODO
.. metadata ..
    Instantiability : Concrete
    SubclassOf : Core:Relationship
    name : SoftwareDependencyRelationship
.. properties ..
    <b>linkType </b>: DependencyLinkType [1..1]
    <b>requirement </b>: DependencyRequirement [1..1]
    <b>scope </b>: DependencyScope [1..1]
}
"DependencyLinkType" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::linkType"
"DependencyRequirement" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::requirement"
"DependencyScope" <-[dashed,thickness=4]-- "SoftwareDependencyRelationship::scope"
}
"Artifact" <|-[thickness=4]--- "File" : Core:Artifact
"Artifact" <|-[thickness=4]--- "Package" : Core:Artifact
"Bom" <|-[thickness=4]--- "Sbom" : Core:Bom
"Artifact" <|-[thickness=4]--- "Snippet" : Core:Artifact
"Relationship" <|-[thickness=4]--- "SoftwareDependencyRelationship" : Core:Relationship
@enduml
